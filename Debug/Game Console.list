
Game Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800272c  0800272c  0001272c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b64  08002b64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b64  08002b64  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b64  08002b64  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000000c  08002b78  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08002b78  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c8c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177c  00000000  00000000  00027cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  00029448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000588  00000000  00000000  00029aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab7a  00000000  00000000  0002a030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c71  00000000  00000000  00044baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098f0c  00000000  00000000  0004d81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001778  00000000  00000000  000e677c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002714 	.word	0x08002714

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002714 	.word	0x08002714

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001de:	4b24      	ldr	r3, [pc, #144]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a23      	ldr	r2, [pc, #140]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b21      	ldr	r3, [pc, #132]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001f6:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a1d      	ldr	r2, [pc, #116]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	4b18      	ldr	r3, [pc, #96]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a17      	ldr	r2, [pc, #92]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b15      	ldr	r3, [pc, #84]	; (8000270 <MX_GPIO_Init+0xa8>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a11      	ldr	r2, [pc, #68]	; (8000270 <MX_GPIO_Init+0xa8>)
 800022c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|CE_Pin|RESET_Pin, GPIO_PIN_SET);
 800023e:	2201      	movs	r2, #1
 8000240:	2170      	movs	r1, #112	; 0x70
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f000 fdaf 	bl	8000da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DC_Pin|CE_Pin|RESET_Pin;
 800024a:	2370      	movs	r3, #112	; 0x70
 800024c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024e:	2301      	movs	r3, #1
 8000250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000252:	2300      	movs	r3, #0
 8000254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000256:	2300      	movs	r3, #0
 8000258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800025a:	f107 0314 	add.w	r3, r7, #20
 800025e:	4619      	mov	r1, r3
 8000260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000264:	f000 fc2e 	bl	8000ac4 <HAL_GPIO_Init>

}
 8000268:	bf00      	nop
 800026a:	3728      	adds	r7, #40	; 0x28
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40021000 	.word	0x40021000

08000274 <lcd_reset>:
#include "font.h"

static uint8_t lcd_buffer[LCD_BUFFER_SIZE];

void lcd_reset()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2140      	movs	r1, #64	; 0x40
 800027c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000280:	f000 fd92 	bl	8000da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000284:	2201      	movs	r2, #1
 8000286:	2140      	movs	r1, #64	; 0x40
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f000 fd8c 	bl	8000da8 <HAL_GPIO_WritePin>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}

08000294 <lcd_cmd>:

void lcd_cmd(uint8_t cmd)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, CE_Pin|DC_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2130      	movs	r1, #48	; 0x30
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a6:	f000 fd7f 	bl	8000da8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80002aa:	1df9      	adds	r1, r7, #7
 80002ac:	f04f 33ff 	mov.w	r3, #4294967295
 80002b0:	2201      	movs	r2, #1
 80002b2:	4806      	ldr	r0, [pc, #24]	; (80002cc <lcd_cmd+0x38>)
 80002b4:	f001 ff29 	bl	800210a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CE_Pin|DC_Pin, GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2130      	movs	r1, #48	; 0x30
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c0:	f000 fd72 	bl	8000da8 <HAL_GPIO_WritePin>
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000220 	.word	0x20000220

080002d0 <lcd_send>:

void lcd_send(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2120      	movs	r1, #32
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f000 fd64 	bl	8000da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e8:	f000 fd5e 	bl	8000da8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, lcd_buffer, LCD_BUFFER_SIZE, HAL_MAX_DELAY);
 80002ec:	f04f 33ff 	mov.w	r3, #4294967295
 80002f0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80002f4:	4905      	ldr	r1, [pc, #20]	; (800030c <lcd_send+0x3c>)
 80002f6:	4806      	ldr	r0, [pc, #24]	; (8000310 <lcd_send+0x40>)
 80002f8:	f001 ff07 	bl	800210a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2120      	movs	r1, #32
 8000300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000304:	f000 fd50 	bl	8000da8 <HAL_GPIO_WritePin>
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000028 	.word	0x20000028
 8000310:	20000220 	.word	0x20000220

08000314 <lcd_setup>:

void lcd_setup(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2140      	movs	r1, #64	; 0x40
 800031c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000320:	f000 fd42 	bl	8000da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000324:	2201      	movs	r2, #1
 8000326:	2140      	movs	r1, #64	; 0x40
 8000328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800032c:	f000 fd3c 	bl	8000da8 <HAL_GPIO_WritePin>

	lcd_cmd(PCD8544_FUNCTION_SET | 1);
 8000330:	2021      	movs	r0, #33	; 0x21
 8000332:	f7ff ffaf 	bl	8000294 <lcd_cmd>
	lcd_cmd(PCD8544_H_BIAS | 4);
 8000336:	2014      	movs	r0, #20
 8000338:	f7ff ffac 	bl	8000294 <lcd_cmd>
	lcd_cmd(PCD8544_H_VOP | 0x1f);
 800033c:	209f      	movs	r0, #159	; 0x9f
 800033e:	f7ff ffa9 	bl	8000294 <lcd_cmd>
	lcd_cmd(PCD8544_FUNCTION_SET);
 8000342:	2020      	movs	r0, #32
 8000344:	f7ff ffa6 	bl	8000294 <lcd_cmd>
	lcd_cmd(PCD8544_DISP_NORMAL);
 8000348:	200c      	movs	r0, #12
 800034a:	f7ff ffa3 	bl	8000294 <lcd_cmd>
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <lcd_clear>:

void lcd_clear(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	memset(lcd_buffer, 0, LCD_BUFFER_SIZE);
 8000358:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800035c:	2100      	movs	r1, #0
 800035e:	4802      	ldr	r0, [pc, #8]	; (8000368 <lcd_clear+0x14>)
 8000360:	f002 f9d0 	bl	8002704 <memset>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}
 8000368:	20000028 	.word	0x20000028

0800036c <lcd_draw_bitmap>:

void lcd_draw_bitmap(const uint8_t* data)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	memcpy(lcd_buffer, data, LCD_BUFFER_SIZE);
 8000374:	4a06      	ldr	r2, [pc, #24]	; (8000390 <lcd_draw_bitmap+0x24>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4610      	mov	r0, r2
 800037a:	4619      	mov	r1, r3
 800037c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000380:	461a      	mov	r2, r3
 8000382:	f002 f9b1 	bl	80026e8 <memcpy>
}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000028 	.word	0x20000028

08000394 <lcd_draw_text>:

void lcd_draw_text(int row, int col, const char* text, int color)
{
 8000394:	b480      	push	{r7}
 8000396:	b089      	sub	sp, #36	; 0x24
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
 80003a0:	603b      	str	r3, [r7, #0]
	int i;
	uint8_t* pbuf = &lcd_buffer[row*84 + col];
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	2254      	movs	r2, #84	; 0x54
 80003a6:	fb02 f203 	mul.w	r2, r2, r3
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	4413      	add	r3, r2
 80003ae:	4a26      	ldr	r2, [pc, #152]	; (8000448 <lcd_draw_text+0xb4>)
 80003b0:	4413      	add	r3, r2
 80003b2:	61bb      	str	r3, [r7, #24]

	while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6]))
 80003b4:	e03a      	b.n	800042c <lcd_draw_text+0x98>
	{
		int ch = *text++;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	1c5a      	adds	r2, r3, #1
 80003ba:	607a      	str	r2, [r7, #4]
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	613b      	str	r3, [r7, #16]
		const uint8_t* font = &font_ASCII[ch - ' '][0];
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	f1a3 0220 	sub.w	r2, r3, #32
 80003c6:	4613      	mov	r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	4413      	add	r3, r2
 80003cc:	4a1f      	ldr	r2, [pc, #124]	; (800044c <lcd_draw_text+0xb8>)
 80003ce:	4413      	add	r3, r2
 80003d0:	617b      	str	r3, [r7, #20]
		for (i = 0; i < 5; i++)
 80003d2:	2300      	movs	r3, #0
 80003d4:	61fb      	str	r3, [r7, #28]
 80003d6:	e018      	b.n	800040a <lcd_draw_text+0x76>
		{
			if(color == 0)
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d108      	bne.n	80003f0 <lcd_draw_text+0x5c>
				*pbuf++ = (*font++);
 80003de:	697a      	ldr	r2, [r7, #20]
 80003e0:	1c53      	adds	r3, r2, #1
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	69bb      	ldr	r3, [r7, #24]
 80003e6:	1c59      	adds	r1, r3, #1
 80003e8:	61b9      	str	r1, [r7, #24]
 80003ea:	7812      	ldrb	r2, [r2, #0]
 80003ec:	701a      	strb	r2, [r3, #0]
 80003ee:	e009      	b.n	8000404 <lcd_draw_text+0x70>
			else
				*pbuf++ = ~(*font++);
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	1c5a      	adds	r2, r3, #1
 80003f4:	617a      	str	r2, [r7, #20]
 80003f6:	781a      	ldrb	r2, [r3, #0]
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	1c59      	adds	r1, r3, #1
 80003fc:	61b9      	str	r1, [r7, #24]
 80003fe:	43d2      	mvns	r2, r2
 8000400:	b2d2      	uxtb	r2, r2
 8000402:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 5; i++)
 8000404:	69fb      	ldr	r3, [r7, #28]
 8000406:	3301      	adds	r3, #1
 8000408:	61fb      	str	r3, [r7, #28]
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	2b04      	cmp	r3, #4
 800040e:	dde3      	ble.n	80003d8 <lcd_draw_text+0x44>
		}
		if(color == 0)
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d105      	bne.n	8000422 <lcd_draw_text+0x8e>
			*pbuf++ = 0;
 8000416:	69bb      	ldr	r3, [r7, #24]
 8000418:	1c5a      	adds	r2, r3, #1
 800041a:	61ba      	str	r2, [r7, #24]
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]
 8000420:	e004      	b.n	800042c <lcd_draw_text+0x98>
		else
			*pbuf++ = 0xff;
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	1c5a      	adds	r2, r3, #1
 8000426:	61ba      	str	r2, [r7, #24]
 8000428:	22ff      	movs	r2, #255	; 0xff
 800042a:	701a      	strb	r2, [r3, #0]
	while ((*text) && (pbuf < &lcd_buffer[LCD_BUFFER_SIZE - 6]))
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d003      	beq.n	800043c <lcd_draw_text+0xa8>
 8000434:	69bb      	ldr	r3, [r7, #24]
 8000436:	4a06      	ldr	r2, [pc, #24]	; (8000450 <lcd_draw_text+0xbc>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d3bc      	bcc.n	80003b6 <lcd_draw_text+0x22>
	}

}
 800043c:	bf00      	nop
 800043e:	3724      	adds	r7, #36	; 0x24
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	20000028 	.word	0x20000028
 800044c:	0800275c 	.word	0x0800275c
 8000450:	2000021a 	.word	0x2000021a

08000454 <lcd_paint_line>:

void lcd_paint_line(int row)
{
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 82; i++)
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	e00b      	b.n	800047a <lcd_paint_line+0x26>
	{
		lcd_buffer[row*84 +i] = 0xff;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2254      	movs	r2, #84	; 0x54
 8000466:	fb02 f203 	mul.w	r2, r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	4413      	add	r3, r2
 800046e:	4a08      	ldr	r2, [pc, #32]	; (8000490 <lcd_paint_line+0x3c>)
 8000470:	21ff      	movs	r1, #255	; 0xff
 8000472:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 82; i++)
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	3301      	adds	r3, #1
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	2b51      	cmp	r3, #81	; 0x51
 800047e:	ddf0      	ble.n	8000462 <lcd_paint_line+0xe>

	}
}
 8000480:	bf00      	nop
 8000482:	bf00      	nop
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000028 	.word	0x20000028

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000498:	f000 f9a4 	bl	80007e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049c:	f000 f817 	bl	80004ce <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a0:	f7ff fe92 	bl	80001c8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80004a4:	f000 f892 	bl	80005cc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2120      	movs	r1, #32
 80004ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004b0:	f000 fc7a 	bl	8000da8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2140      	movs	r1, #64	; 0x40
 80004b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004bc:	f000 fc74 	bl	8000da8 <HAL_GPIO_WritePin>

  lcd_reset();
 80004c0:	f7ff fed8 	bl	8000274 <lcd_reset>
  lcd_setup();
 80004c4:	f7ff ff26 	bl	8000314 <lcd_setup>
  menu_screen();
 80004c8:	f000 f842 	bl	8000550 <menu_screen>

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <main+0x38>

080004ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b090      	sub	sp, #64	; 0x40
 80004d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d4:	f107 0318 	add.w	r3, r7, #24
 80004d8:	2228      	movs	r2, #40	; 0x28
 80004da:	2100      	movs	r1, #0
 80004dc:	4618      	mov	r0, r3
 80004de:	f002 f911 	bl	8002704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f0:	2302      	movs	r3, #2
 80004f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f4:	2301      	movs	r3, #1
 80004f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f8:	2310      	movs	r3, #16
 80004fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000500:	f107 0318 	add.w	r3, r7, #24
 8000504:	4618      	mov	r0, r3
 8000506:	f000 fc67 	bl	8000dd8 <HAL_RCC_OscConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000510:	f000 f818 	bl	8000544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000514:	230f      	movs	r3, #15
 8000516:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f001 fb5b 	bl	8001be8 <HAL_RCC_ClockConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000538:	f000 f804 	bl	8000544 <Error_Handler>
  }
}
 800053c:	bf00      	nop
 800053e:	3740      	adds	r7, #64	; 0x40
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	e7fe      	b.n	800054c <Error_Handler+0x8>
	...

08000550 <menu_screen>:
#include "main_menu.h"
#include "bitmaps.h"
#include "lcd.h"

void menu_screen()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	lcd_clear();
 8000554:	f7ff fefe 	bl	8000354 <lcd_clear>
	lcd_send();
 8000558:	f7ff feba 	bl	80002d0 <lcd_send>

	HAL_Delay(2000);
 800055c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000560:	f000 f9a6 	bl	80008b0 <HAL_Delay>

	lcd_draw_bitmap(game_icon);
 8000564:	4814      	ldr	r0, [pc, #80]	; (80005b8 <menu_screen+0x68>)
 8000566:	f7ff ff01 	bl	800036c <lcd_draw_bitmap>
	lcd_send();
 800056a:	f7ff feb1 	bl	80002d0 <lcd_send>

	HAL_Delay(2000);
 800056e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000572:	f000 f99d 	bl	80008b0 <HAL_Delay>

	lcd_clear();
 8000576:	f7ff feed 	bl	8000354 <lcd_clear>
	lcd_paint_line(1);
 800057a:	2001      	movs	r0, #1
 800057c:	f7ff ff6a 	bl	8000454 <lcd_paint_line>
	lcd_draw_text(1, 27, "Snake",black);
 8000580:	2301      	movs	r3, #1
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <menu_screen+0x6c>)
 8000584:	211b      	movs	r1, #27
 8000586:	2001      	movs	r0, #1
 8000588:	f7ff ff04 	bl	8000394 <lcd_draw_text>
	lcd_draw_text(2, 24, "Tetris",white);
 800058c:	2300      	movs	r3, #0
 800058e:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <menu_screen+0x70>)
 8000590:	2118      	movs	r1, #24
 8000592:	2002      	movs	r0, #2
 8000594:	f7ff fefe 	bl	8000394 <lcd_draw_text>
	lcd_draw_text(3, 0, "Space invaders",white);
 8000598:	2300      	movs	r3, #0
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <menu_screen+0x74>)
 800059c:	2100      	movs	r1, #0
 800059e:	2003      	movs	r0, #3
 80005a0:	f7ff fef8 	bl	8000394 <lcd_draw_text>
	lcd_draw_text(4, 8, "Brick braker",white);
 80005a4:	2300      	movs	r3, #0
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <menu_screen+0x78>)
 80005a8:	2108      	movs	r1, #8
 80005aa:	2004      	movs	r0, #4
 80005ac:	f7ff fef2 	bl	8000394 <lcd_draw_text>
	lcd_send();
 80005b0:	f7ff fe8e 	bl	80002d0 <lcd_send>

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	0800293c 	.word	0x0800293c
 80005bc:	0800272c 	.word	0x0800272c
 80005c0:	08002734 	.word	0x08002734
 80005c4:	0800273c 	.word	0x0800273c
 80005c8:	0800274c 	.word	0x0800274c

080005cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_SPI2_Init+0x74>)
 80005d2:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <MX_SPI2_Init+0x78>)
 80005d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_SPI2_Init+0x74>)
 80005d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_SPI2_Init+0x74>)
 80005e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005e4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_SPI2_Init+0x74>)
 80005e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_SPI2_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_SPI2_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_SPI2_Init+0x74>)
 80005fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000600:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_SPI2_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <MX_SPI2_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_SPI2_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_SPI2_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_SPI2_Init+0x74>)
 800061c:	2207      	movs	r2, #7
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_SPI2_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_SPI2_Init+0x74>)
 8000628:	2208      	movs	r2, #8
 800062a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_SPI2_Init+0x74>)
 800062e:	f001 fcc1 	bl	8001fb4 <HAL_SPI_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000638:	f7ff ff84 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000220 	.word	0x20000220
 8000644:	40003800 	.word	0x40003800

08000648 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <HAL_SPI_MspInit+0x7c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d128      	bne.n	80006bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <HAL_SPI_MspInit+0x80>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4a16      	ldr	r2, [pc, #88]	; (80006c8 <HAL_SPI_MspInit+0x80>)
 8000670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000674:	61d3      	str	r3, [r2, #28]
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <HAL_SPI_MspInit+0x80>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_SPI_MspInit+0x80>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a10      	ldr	r2, [pc, #64]	; (80006c8 <HAL_SPI_MspInit+0x80>)
 8000688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <HAL_SPI_MspInit+0x80>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800069a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006ac:	2305      	movs	r3, #5
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4619      	mov	r1, r3
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_SPI_MspInit+0x84>)
 80006b8:	f000 fa04 	bl	8000ac4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80006bc:	bf00      	nop
 80006be:	3728      	adds	r7, #40	; 0x28
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40003800 	.word	0x40003800
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000400 	.word	0x48000400

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_MspInit+0x44>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <HAL_MspInit+0x44>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6193      	str	r3, [r2, #24]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_MspInit+0x44>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x44>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x44>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x44>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f884 	bl	8000870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <SystemInit+0x20>)
 8000772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000776:	4a05      	ldr	r2, [pc, #20]	; (800078c <SystemInit+0x20>)
 8000778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800077c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <LoopForever+0x6>)
  ldr r1, =_edata
 8000796:	490e      	ldr	r1, [pc, #56]	; (80007d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000798:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <LoopForever+0xe>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800079c:	e002      	b.n	80007a4 <LoopCopyDataInit>

0800079e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a2:	3304      	adds	r3, #4

080007a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a8:	d3f9      	bcc.n	800079e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ac:	4c0b      	ldr	r4, [pc, #44]	; (80007dc <LoopForever+0x16>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b0:	e001      	b.n	80007b6 <LoopFillZerobss>

080007b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b4:	3204      	adds	r2, #4

080007b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b8:	d3fb      	bcc.n	80007b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ba:	f7ff ffd7 	bl	800076c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007be:	f001 ff6f 	bl	80026a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007c2:	f7ff fe67 	bl	8000494 <main>

080007c6 <LoopForever>:

LoopForever:
    b LoopForever
 80007c6:	e7fe      	b.n	80007c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007c8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80007cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007d4:	08002b6c 	.word	0x08002b6c
  ldr r2, =_sbss
 80007d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007dc:	20000288 	.word	0x20000288

080007e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007e0:	e7fe      	b.n	80007e0 <ADC1_IRQHandler>
	...

080007e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_Init+0x28>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <HAL_Init+0x28>)
 80007ee:	f043 0310 	orr.w	r3, r3, #16
 80007f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 f931 	bl	8000a5c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 f808 	bl	8000810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000800:	f7ff ff66 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40022000 	.word	0x40022000

08000810 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_InitTick+0x54>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_InitTick+0x58>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000826:	fbb3 f3f1 	udiv	r3, r3, r1
 800082a:	fbb2 f3f3 	udiv	r3, r2, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f93b 	bl	8000aaa <HAL_SYSTICK_Config>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	e00e      	b.n	800085c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d80a      	bhi.n	800085a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000844:	2200      	movs	r2, #0
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f000 f911 	bl	8000a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000850:	4a06      	ldr	r2, [pc, #24]	; (800086c <HAL_InitTick+0x5c>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000856:	2300      	movs	r3, #0
 8000858:	e000      	b.n	800085c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000000 	.word	0x20000000
 8000868:	20000008 	.word	0x20000008
 800086c:	20000004 	.word	0x20000004

08000870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_IncTick+0x20>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_IncTick+0x24>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4413      	add	r3, r2
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_IncTick+0x24>)
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008
 8000894:	20000284 	.word	0x20000284

08000898 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return uwTick;  
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <HAL_GetTick+0x14>)
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000284 	.word	0x20000284

080008b0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b8:	f7ff ffee 	bl	8000898 <HAL_GetTick>
 80008bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c8:	d005      	beq.n	80008d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_Delay+0x44>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4413      	add	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008d6:	bf00      	nop
 80008d8:	f7ff ffde 	bl	8000898 <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f7      	bhi.n	80008d8 <HAL_Delay+0x28>
  {
  }
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000008 	.word	0x20000008

080008f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000914:	4013      	ands	r3, r2
 8000916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <__NVIC_SetPriorityGrouping+0x44>)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	60d3      	str	r3, [r2, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <__NVIC_GetPriorityGrouping+0x18>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	f003 0307 	and.w	r3, r3, #7
}
 800094e:	4618      	mov	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db0a      	blt.n	8000986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	490c      	ldr	r1, [pc, #48]	; (80009a8 <__NVIC_SetPriority+0x4c>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	440b      	add	r3, r1
 8000980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000984:	e00a      	b.n	800099c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4908      	ldr	r1, [pc, #32]	; (80009ac <__NVIC_SetPriority+0x50>)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	3b04      	subs	r3, #4
 8000994:	0112      	lsls	r2, r2, #4
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	440b      	add	r3, r1
 800099a:	761a      	strb	r2, [r3, #24]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f1c3 0307 	rsb	r3, r3, #7
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	bf28      	it	cs
 80009ce:	2304      	movcs	r3, #4
 80009d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3304      	adds	r3, #4
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d902      	bls.n	80009e0 <NVIC_EncodePriority+0x30>
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3b03      	subs	r3, #3
 80009de:	e000      	b.n	80009e2 <NVIC_EncodePriority+0x32>
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43da      	mvns	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	43d9      	mvns	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	4313      	orrs	r3, r2
         );
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3724      	adds	r7, #36	; 0x24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a28:	d301      	bcc.n	8000a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00f      	b.n	8000a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <SysTick_Config+0x40>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a36:	210f      	movs	r1, #15
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f7ff ff8e 	bl	800095c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <SysTick_Config+0x40>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a46:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SysTick_Config+0x40>)
 8000a48:	2207      	movs	r2, #7
 8000a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	e000e010 	.word	0xe000e010

08000a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff47 	bl	80008f8 <__NVIC_SetPriorityGrouping>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a84:	f7ff ff5c 	bl	8000940 <__NVIC_GetPriorityGrouping>
 8000a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	6978      	ldr	r0, [r7, #20]
 8000a90:	f7ff ff8e 	bl	80009b0 <NVIC_EncodePriority>
 8000a94:	4602      	mov	r2, r0
 8000a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff5d 	bl	800095c <__NVIC_SetPriority>
}
 8000aa2:	bf00      	nop
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffb0 	bl	8000a18 <SysTick_Config>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad2:	e14e      	b.n	8000d72 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 8140 	beq.w	8000d6c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d00b      	beq.n	8000b0c <HAL_GPIO_Init+0x48>
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d007      	beq.n	8000b0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b00:	2b11      	cmp	r3, #17
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2b12      	cmp	r3, #18
 8000b0a:	d130      	bne.n	8000b6e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	2203      	movs	r2, #3
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68da      	ldr	r2, [r3, #12]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b42:	2201      	movs	r2, #1
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	091b      	lsrs	r3, r3, #4
 8000b58:	f003 0201 	and.w	r2, r3, #1
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	2203      	movs	r2, #3
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_Init+0xea>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b12      	cmp	r3, #18
 8000bac:	d123      	bne.n	8000bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	220f      	movs	r2, #15
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	08da      	lsrs	r2, r3, #3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3208      	adds	r2, #8
 8000bf0:	6939      	ldr	r1, [r7, #16]
 8000bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0203 	and.w	r2, r3, #3
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 809a 	beq.w	8000d6c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c38:	4b55      	ldr	r3, [pc, #340]	; (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a54      	ldr	r2, [pc, #336]	; (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b52      	ldr	r3, [pc, #328]	; (8000d90 <HAL_GPIO_Init+0x2cc>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c50:	4a50      	ldr	r2, [pc, #320]	; (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	3302      	adds	r3, #2
 8000c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	220f      	movs	r2, #15
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c7a:	d013      	beq.n	8000ca4 <HAL_GPIO_Init+0x1e0>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a46      	ldr	r2, [pc, #280]	; (8000d98 <HAL_GPIO_Init+0x2d4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d00d      	beq.n	8000ca0 <HAL_GPIO_Init+0x1dc>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a45      	ldr	r2, [pc, #276]	; (8000d9c <HAL_GPIO_Init+0x2d8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d007      	beq.n	8000c9c <HAL_GPIO_Init+0x1d8>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a44      	ldr	r2, [pc, #272]	; (8000da0 <HAL_GPIO_Init+0x2dc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d101      	bne.n	8000c98 <HAL_GPIO_Init+0x1d4>
 8000c94:	2303      	movs	r3, #3
 8000c96:	e006      	b.n	8000ca6 <HAL_GPIO_Init+0x1e2>
 8000c98:	2305      	movs	r3, #5
 8000c9a:	e004      	b.n	8000ca6 <HAL_GPIO_Init+0x1e2>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e002      	b.n	8000ca6 <HAL_GPIO_Init+0x1e2>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <HAL_GPIO_Init+0x1e2>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	f002 0203 	and.w	r2, r2, #3
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	4093      	lsls	r3, r2
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cb6:	4937      	ldr	r1, [pc, #220]	; (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cc4:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ce8:	4a2e      	ldr	r2, [pc, #184]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d12:	4a24      	ldr	r2, [pc, #144]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f47f aea9 	bne.w	8000ad4 <HAL_GPIO_Init+0x10>
  }
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	371c      	adds	r7, #28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	48000800 	.word	0x48000800
 8000da0:	48000c00 	.word	0x48000c00
 8000da4:	40010400 	.word	0x40010400

08000da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	807b      	strh	r3, [r7, #2]
 8000db4:	4613      	mov	r3, r2
 8000db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000db8:	787b      	ldrb	r3, [r7, #1]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dbe:	887a      	ldrh	r2, [r7, #2]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dc4:	e002      	b.n	8000dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	f000 bef4 	b.w	8001bda <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f000 816a 	beq.w	80010d6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e02:	4bb3      	ldr	r3, [pc, #716]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d00c      	beq.n	8000e28 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e0e:	4bb0      	ldr	r3, [pc, #704]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 030c 	and.w	r3, r3, #12
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d159      	bne.n	8000ece <HAL_RCC_OscConfig+0xf6>
 8000e1a:	4bad      	ldr	r3, [pc, #692]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e26:	d152      	bne.n	8000ece <HAL_RCC_OscConfig+0xf6>
 8000e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e2c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e30:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e34:	fa93 f3a3 	rbit	r3, r3
 8000e38:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e3c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e40:	fab3 f383 	clz	r3, r3
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d102      	bne.n	8000e5a <HAL_RCC_OscConfig+0x82>
 8000e54:	4b9e      	ldr	r3, [pc, #632]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	e015      	b.n	8000e86 <HAL_RCC_OscConfig+0xae>
 8000e5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e5e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e62:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e66:	fa93 f3a3 	rbit	r3, r3
 8000e6a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e72:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e76:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e7a:	fa93 f3a3 	rbit	r3, r3
 8000e7e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e82:	4b93      	ldr	r3, [pc, #588]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e8a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e8e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e92:	fa92 f2a2 	rbit	r2, r2
 8000e96:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e9a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e9e:	fab2 f282 	clz	r2, r2
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	f042 0220 	orr.w	r2, r2, #32
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	f002 021f 	and.w	r2, r2, #31
 8000eae:	2101      	movs	r1, #1
 8000eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 810c 	beq.w	80010d4 <HAL_RCC_OscConfig+0x2fc>
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f040 8106 	bne.w	80010d4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f000 be86 	b.w	8001bda <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed8:	d106      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x110>
 8000eda:	4b7d      	ldr	r3, [pc, #500]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a7c      	ldr	r2, [pc, #496]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e030      	b.n	8000f4a <HAL_RCC_OscConfig+0x172>
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x134>
 8000ef2:	4b77      	ldr	r3, [pc, #476]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a76      	ldr	r2, [pc, #472]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b74      	ldr	r3, [pc, #464]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a73      	ldr	r2, [pc, #460]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e01e      	b.n	8000f4a <HAL_RCC_OscConfig+0x172>
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f16:	d10c      	bne.n	8000f32 <HAL_RCC_OscConfig+0x15a>
 8000f18:	4b6d      	ldr	r3, [pc, #436]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a6c      	ldr	r2, [pc, #432]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000f1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	4b6a      	ldr	r3, [pc, #424]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a69      	ldr	r2, [pc, #420]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	e00b      	b.n	8000f4a <HAL_RCC_OscConfig+0x172>
 8000f32:	4b67      	ldr	r3, [pc, #412]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a66      	ldr	r2, [pc, #408]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	4b64      	ldr	r3, [pc, #400]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a63      	ldr	r2, [pc, #396]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f48:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f4a:	4b61      	ldr	r3, [pc, #388]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	f023 020f 	bic.w	r2, r3, #15
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	495d      	ldr	r1, [pc, #372]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d059      	beq.n	800101c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fc96 	bl	8000898 <HAL_GetTick>
 8000f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f70:	e00a      	b.n	8000f88 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f72:	f7ff fc91 	bl	8000898 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b64      	cmp	r3, #100	; 0x64
 8000f80:	d902      	bls.n	8000f88 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	f000 be29 	b.w	8001bda <HAL_RCC_OscConfig+0xe02>
 8000f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f90:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f94:	fa93 f3a3 	rbit	r3, r3
 8000f98:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f9c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d102      	bne.n	8000fba <HAL_RCC_OscConfig+0x1e2>
 8000fb4:	4b46      	ldr	r3, [pc, #280]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	e015      	b.n	8000fe6 <HAL_RCC_OscConfig+0x20e>
 8000fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fbe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000fc6:	fa93 f3a3 	rbit	r3, r3
 8000fca:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fd6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fea:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ff2:	fa92 f2a2 	rbit	r2, r2
 8000ff6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ffa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ffe:	fab2 f282 	clz	r2, r2
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	f042 0220 	orr.w	r2, r2, #32
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	f002 021f 	and.w	r2, r2, #31
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f202 	lsl.w	r2, r1, r2
 8001014:	4013      	ands	r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0ab      	beq.n	8000f72 <HAL_RCC_OscConfig+0x19a>
 800101a:	e05c      	b.n	80010d6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fc3c 	bl	8000898 <HAL_GetTick>
 8001020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001024:	e00a      	b.n	800103c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001026:	f7ff fc37 	bl	8000898 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	; 0x64
 8001034:	d902      	bls.n	800103c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	f000 bdcf 	b.w	8001bda <HAL_RCC_OscConfig+0xe02>
 800103c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001040:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001044:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001048:	fa93 f3a3 	rbit	r3, r3
 800104c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001050:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001054:	fab3 f383 	clz	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d102      	bne.n	800106e <HAL_RCC_OscConfig+0x296>
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	e015      	b.n	800109a <HAL_RCC_OscConfig+0x2c2>
 800106e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001072:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001086:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800108a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_RCC_OscConfig+0x2f8>)
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800109e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80010a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80010a6:	fa92 f2a2 	rbit	r2, r2
 80010aa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010ae:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010b2:	fab2 f282 	clz	r2, r2
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	f042 0220 	orr.w	r2, r2, #32
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	f002 021f 	and.w	r2, r2, #31
 80010c2:	2101      	movs	r1, #1
 80010c4:	fa01 f202 	lsl.w	r2, r1, r2
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1ab      	bne.n	8001026 <HAL_RCC_OscConfig+0x24e>
 80010ce:	e002      	b.n	80010d6 <HAL_RCC_OscConfig+0x2fe>
 80010d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 816f 	beq.w	80013c4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010e6:	4bd0      	ldr	r3, [pc, #832]	; (8001428 <HAL_RCC_OscConfig+0x650>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00b      	beq.n	800110a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010f2:	4bcd      	ldr	r3, [pc, #820]	; (8001428 <HAL_RCC_OscConfig+0x650>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d16c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x400>
 80010fe:	4bca      	ldr	r3, [pc, #808]	; (8001428 <HAL_RCC_OscConfig+0x650>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d166      	bne.n	80011d8 <HAL_RCC_OscConfig+0x400>
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800111c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d102      	bne.n	800113a <HAL_RCC_OscConfig+0x362>
 8001134:	4bbc      	ldr	r3, [pc, #752]	; (8001428 <HAL_RCC_OscConfig+0x650>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	e013      	b.n	8001162 <HAL_RCC_OscConfig+0x38a>
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001144:	fa93 f3a3 	rbit	r3, r3
 8001148:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800114c:	2302      	movs	r3, #2
 800114e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001152:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001156:	fa93 f3a3 	rbit	r3, r3
 800115a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800115e:	4bb2      	ldr	r3, [pc, #712]	; (8001428 <HAL_RCC_OscConfig+0x650>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	2202      	movs	r2, #2
 8001164:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001168:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800116c:	fa92 f2a2 	rbit	r2, r2
 8001170:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001174:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001178:	fab2 f282 	clz	r2, r2
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	f042 0220 	orr.w	r2, r2, #32
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	f002 021f 	and.w	r2, r2, #31
 8001188:	2101      	movs	r1, #1
 800118a:	fa01 f202 	lsl.w	r2, r1, r2
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d007      	beq.n	80011a4 <HAL_RCC_OscConfig+0x3cc>
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d002      	beq.n	80011a4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	f000 bd1b 	b.w	8001bda <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a4:	4ba0      	ldr	r3, [pc, #640]	; (8001428 <HAL_RCC_OscConfig+0x650>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	21f8      	movs	r1, #248	; 0xf8
 80011b4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011bc:	fa91 f1a1 	rbit	r1, r1
 80011c0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011c4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80011c8:	fab1 f181 	clz	r1, r1
 80011cc:	b2c9      	uxtb	r1, r1
 80011ce:	408b      	lsls	r3, r1
 80011d0:	4995      	ldr	r1, [pc, #596]	; (8001428 <HAL_RCC_OscConfig+0x650>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	e0f5      	b.n	80013c4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 8085 	beq.w	80012ee <HAL_RCC_OscConfig+0x516>
 80011e4:	2301      	movs	r3, #1
 80011e6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011fa:	fab3 f383 	clz	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001204:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	461a      	mov	r2, r3
 800120c:	2301      	movs	r3, #1
 800120e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fb42 	bl	8000898 <HAL_GetTick>
 8001214:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	e00a      	b.n	8001230 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121a:	f7ff fb3d 	bl	8000898 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d902      	bls.n	8001230 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	f000 bcd5 	b.w	8001bda <HAL_RCC_OscConfig+0xe02>
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001236:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800123a:	fa93 f3a3 	rbit	r3, r3
 800123e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001242:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	095b      	lsrs	r3, r3, #5
 800124e:	b2db      	uxtb	r3, r3
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b01      	cmp	r3, #1
 8001258:	d102      	bne.n	8001260 <HAL_RCC_OscConfig+0x488>
 800125a:	4b73      	ldr	r3, [pc, #460]	; (8001428 <HAL_RCC_OscConfig+0x650>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	e013      	b.n	8001288 <HAL_RCC_OscConfig+0x4b0>
 8001260:	2302      	movs	r3, #2
 8001262:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800126a:	fa93 f3a3 	rbit	r3, r3
 800126e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001272:	2302      	movs	r3, #2
 8001274:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001278:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800127c:	fa93 f3a3 	rbit	r3, r3
 8001280:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001284:	4b68      	ldr	r3, [pc, #416]	; (8001428 <HAL_RCC_OscConfig+0x650>)
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	2202      	movs	r2, #2
 800128a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800128e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001292:	fa92 f2a2 	rbit	r2, r2
 8001296:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800129a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800129e:	fab2 f282 	clz	r2, r2
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	f042 0220 	orr.w	r2, r2, #32
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	f002 021f 	and.w	r2, r2, #31
 80012ae:	2101      	movs	r1, #1
 80012b0:	fa01 f202 	lsl.w	r2, r1, r2
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0af      	beq.n	800121a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	4b5b      	ldr	r3, [pc, #364]	; (8001428 <HAL_RCC_OscConfig+0x650>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	21f8      	movs	r1, #248	; 0xf8
 80012ca:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012d2:	fa91 f1a1 	rbit	r1, r1
 80012d6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012da:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012de:	fab1 f181 	clz	r1, r1
 80012e2:	b2c9      	uxtb	r1, r1
 80012e4:	408b      	lsls	r3, r1
 80012e6:	4950      	ldr	r1, [pc, #320]	; (8001428 <HAL_RCC_OscConfig+0x650>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	600b      	str	r3, [r1, #0]
 80012ec:	e06a      	b.n	80013c4 <HAL_RCC_OscConfig+0x5ec>
 80012ee:	2301      	movs	r3, #1
 80012f0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001300:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001304:	fab3 f383 	clz	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800130e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	461a      	mov	r2, r3
 8001316:	2300      	movs	r3, #0
 8001318:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fabd 	bl	8000898 <HAL_GetTick>
 800131e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	e00a      	b.n	800133a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001324:	f7ff fab8 	bl	8000898 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d902      	bls.n	800133a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	f000 bc50 	b.w	8001bda <HAL_RCC_OscConfig+0xe02>
 800133a:	2302      	movs	r3, #2
 800133c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001340:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800134c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001350:	fab3 f383 	clz	r3, r3
 8001354:	b2db      	uxtb	r3, r3
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d102      	bne.n	800136a <HAL_RCC_OscConfig+0x592>
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <HAL_RCC_OscConfig+0x650>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	e013      	b.n	8001392 <HAL_RCC_OscConfig+0x5ba>
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001374:	fa93 f3a3 	rbit	r3, r3
 8001378:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800137c:	2302      	movs	r3, #2
 800137e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001382:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001386:	fa93 f3a3 	rbit	r3, r3
 800138a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_RCC_OscConfig+0x650>)
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	2202      	movs	r2, #2
 8001394:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001398:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800139c:	fa92 f2a2 	rbit	r2, r2
 80013a0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80013a4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013a8:	fab2 f282 	clz	r2, r2
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	f042 0220 	orr.w	r2, r2, #32
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	f002 021f 	and.w	r2, r2, #31
 80013b8:	2101      	movs	r1, #1
 80013ba:	fa01 f202 	lsl.w	r2, r1, r2
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1af      	bne.n	8001324 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 80da 	beq.w	8001588 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d069      	beq.n	80014b2 <HAL_RCC_OscConfig+0x6da>
 80013de:	2301      	movs	r3, #1
 80013e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013e8:	fa93 f3a3 	rbit	r3, r3
 80013ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f4:	fab3 f383 	clz	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_OscConfig+0x654>)
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	461a      	mov	r2, r3
 8001404:	2301      	movs	r3, #1
 8001406:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001408:	f7ff fa46 	bl	8000898 <HAL_GetTick>
 800140c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001410:	e00e      	b.n	8001430 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001412:	f7ff fa41 	bl	8000898 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d906      	bls.n	8001430 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e3d9      	b.n	8001bda <HAL_RCC_OscConfig+0xe02>
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	10908120 	.word	0x10908120
 8001430:	2302      	movs	r3, #2
 8001432:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800143a:	fa93 f3a3 	rbit	r3, r3
 800143e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001442:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001446:	2202      	movs	r2, #2
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	fa93 f2a3 	rbit	r2, r3
 8001454:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800145e:	2202      	movs	r2, #2
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	fa93 f2a3 	rbit	r2, r3
 800146c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001470:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	4ba5      	ldr	r3, [pc, #660]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 8001474:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001476:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800147a:	2102      	movs	r1, #2
 800147c:	6019      	str	r1, [r3, #0]
 800147e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	fa93 f1a3 	rbit	r1, r3
 8001488:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800148c:	6019      	str	r1, [r3, #0]
  return result;
 800148e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	2101      	movs	r1, #1
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0b0      	beq.n	8001412 <HAL_RCC_OscConfig+0x63a>
 80014b0:	e06a      	b.n	8001588 <HAL_RCC_OscConfig+0x7b0>
 80014b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	fa93 f2a3 	rbit	r2, r3
 80014c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014c8:	601a      	str	r2, [r3, #0]
  return result;
 80014ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014ce:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b8c      	ldr	r3, [pc, #560]	; (800170c <HAL_RCC_OscConfig+0x934>)
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	461a      	mov	r2, r3
 80014e0:	2300      	movs	r3, #0
 80014e2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff f9d8 	bl	8000898 <HAL_GetTick>
 80014e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	e009      	b.n	8001502 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff f9d3 	bl	8000898 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e36b      	b.n	8001bda <HAL_RCC_OscConfig+0xe02>
 8001502:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001506:	2202      	movs	r2, #2
 8001508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	fa93 f2a3 	rbit	r2, r3
 8001514:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800151e:	2202      	movs	r2, #2
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	fa93 f2a3 	rbit	r2, r3
 800152c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001536:	2202      	movs	r2, #2
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	fa93 f2a3 	rbit	r2, r3
 8001544:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001548:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154a:	4b6f      	ldr	r3, [pc, #444]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 800154c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001552:	2102      	movs	r1, #2
 8001554:	6019      	str	r1, [r3, #0]
 8001556:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	fa93 f1a3 	rbit	r1, r3
 8001560:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001564:	6019      	str	r1, [r3, #0]
  return result;
 8001566:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	fab3 f383 	clz	r3, r3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	2101      	movs	r1, #1
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1b2      	bne.n	80014ee <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 8158 	beq.w	8001848 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159e:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d112      	bne.n	80015d0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b57      	ldr	r3, [pc, #348]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a56      	ldr	r2, [pc, #344]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b54      	ldr	r3, [pc, #336]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	4b4f      	ldr	r3, [pc, #316]	; (8001710 <HAL_RCC_OscConfig+0x938>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d11a      	bne.n	8001612 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015dc:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <HAL_RCC_OscConfig+0x938>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a4b      	ldr	r2, [pc, #300]	; (8001710 <HAL_RCC_OscConfig+0x938>)
 80015e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e8:	f7ff f956 	bl	8000898 <HAL_GetTick>
 80015ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	e009      	b.n	8001606 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f2:	f7ff f951 	bl	8000898 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	; 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e2e9      	b.n	8001bda <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	4b42      	ldr	r3, [pc, #264]	; (8001710 <HAL_RCC_OscConfig+0x938>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0ef      	beq.n	80015f2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x852>
 800161c:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a39      	ldr	r2, [pc, #228]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	e02f      	b.n	800168a <HAL_RCC_OscConfig+0x8b2>
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10c      	bne.n	800164e <HAL_RCC_OscConfig+0x876>
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a33      	ldr	r2, [pc, #204]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	4b31      	ldr	r3, [pc, #196]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4a30      	ldr	r2, [pc, #192]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 8001646:	f023 0304 	bic.w	r3, r3, #4
 800164a:	6213      	str	r3, [r2, #32]
 800164c:	e01d      	b.n	800168a <HAL_RCC_OscConfig+0x8b2>
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	2b05      	cmp	r3, #5
 8001656:	d10c      	bne.n	8001672 <HAL_RCC_OscConfig+0x89a>
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a2a      	ldr	r2, [pc, #168]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	4b28      	ldr	r3, [pc, #160]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4a27      	ldr	r2, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	e00b      	b.n	800168a <HAL_RCC_OscConfig+0x8b2>
 8001672:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a24      	ldr	r2, [pc, #144]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	6213      	str	r3, [r2, #32]
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4a21      	ldr	r2, [pc, #132]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 8001684:	f023 0304 	bic.w	r3, r3, #4
 8001688:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d06b      	beq.n	800176c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff f900 	bl	8000898 <HAL_GetTick>
 8001698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	e00b      	b.n	80016b6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff f8fb 	bl	8000898 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e291      	b.n	8001bda <HAL_RCC_OscConfig+0xe02>
 80016b6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016ba:	2202      	movs	r2, #2
 80016bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	fa93 f2a3 	rbit	r2, r3
 80016c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016d2:	2202      	movs	r2, #2
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fa93 f2a3 	rbit	r2, r3
 80016e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016e4:	601a      	str	r2, [r3, #0]
  return result;
 80016e6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	fab3 f383 	clz	r3, r3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	095b      	lsrs	r3, r3, #5
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d109      	bne.n	8001714 <HAL_RCC_OscConfig+0x93c>
 8001700:	4b01      	ldr	r3, [pc, #4]	; (8001708 <HAL_RCC_OscConfig+0x930>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	e014      	b.n	8001730 <HAL_RCC_OscConfig+0x958>
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	10908120 	.word	0x10908120
 8001710:	40007000 	.word	0x40007000
 8001714:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001718:	2202      	movs	r2, #2
 800171a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	fa93 f2a3 	rbit	r2, r3
 8001726:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	4bbb      	ldr	r3, [pc, #748]	; (8001a1c <HAL_RCC_OscConfig+0xc44>)
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001734:	2102      	movs	r1, #2
 8001736:	6011      	str	r1, [r2, #0]
 8001738:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	fa92 f1a2 	rbit	r1, r2
 8001742:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001746:	6011      	str	r1, [r2, #0]
  return result;
 8001748:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	fab2 f282 	clz	r2, r2
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	f002 021f 	and.w	r2, r2, #31
 800175e:	2101      	movs	r1, #1
 8001760:	fa01 f202 	lsl.w	r2, r1, r2
 8001764:	4013      	ands	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d099      	beq.n	800169e <HAL_RCC_OscConfig+0x8c6>
 800176a:	e063      	b.n	8001834 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176c:	f7ff f894 	bl	8000898 <HAL_GetTick>
 8001770:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001774:	e00b      	b.n	800178e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001776:	f7ff f88f 	bl	8000898 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e225      	b.n	8001bda <HAL_RCC_OscConfig+0xe02>
 800178e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001792:	2202      	movs	r2, #2
 8001794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	fa93 f2a3 	rbit	r2, r3
 80017a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017aa:	2202      	movs	r2, #2
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fa93 f2a3 	rbit	r2, r3
 80017b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017bc:	601a      	str	r2, [r3, #0]
  return result;
 80017be:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c4:	fab3 f383 	clz	r3, r3
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d102      	bne.n	80017de <HAL_RCC_OscConfig+0xa06>
 80017d8:	4b90      	ldr	r3, [pc, #576]	; (8001a1c <HAL_RCC_OscConfig+0xc44>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	e00d      	b.n	80017fa <HAL_RCC_OscConfig+0xa22>
 80017de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017e2:	2202      	movs	r2, #2
 80017e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	4b89      	ldr	r3, [pc, #548]	; (8001a1c <HAL_RCC_OscConfig+0xc44>)
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017fe:	2102      	movs	r1, #2
 8001800:	6011      	str	r1, [r2, #0]
 8001802:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	fa92 f1a2 	rbit	r1, r2
 800180c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001810:	6011      	str	r1, [r2, #0]
  return result;
 8001812:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	fab2 f282 	clz	r2, r2
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	f002 021f 	and.w	r2, r2, #31
 8001828:	2101      	movs	r1, #1
 800182a:	fa01 f202 	lsl.w	r2, r1, r2
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1a0      	bne.n	8001776 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001834:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183c:	4b77      	ldr	r3, [pc, #476]	; (8001a1c <HAL_RCC_OscConfig+0xc44>)
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	4a76      	ldr	r2, [pc, #472]	; (8001a1c <HAL_RCC_OscConfig+0xc44>)
 8001842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001846:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 81c2 	beq.w	8001bd8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001854:	4b71      	ldr	r3, [pc, #452]	; (8001a1c <HAL_RCC_OscConfig+0xc44>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b08      	cmp	r3, #8
 800185e:	f000 819c 	beq.w	8001b9a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b02      	cmp	r3, #2
 800186a:	f040 8114 	bne.w	8001a96 <HAL_RCC_OscConfig+0xcbe>
 800186e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001872:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	fa93 f2a3 	rbit	r2, r3
 8001882:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001886:	601a      	str	r2, [r3, #0]
  return result;
 8001888:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800188c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001898:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	461a      	mov	r2, r3
 80018a0:	2300      	movs	r3, #0
 80018a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7fe fff8 	bl	8000898 <HAL_GetTick>
 80018a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ac:	e009      	b.n	80018c2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ae:	f7fe fff3 	bl	8000898 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e18b      	b.n	8001bda <HAL_RCC_OscConfig+0xe02>
 80018c2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	fa93 f2a3 	rbit	r2, r3
 80018d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018da:	601a      	str	r2, [r3, #0]
  return result;
 80018dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e2:	fab3 f383 	clz	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d102      	bne.n	80018fc <HAL_RCC_OscConfig+0xb24>
 80018f6:	4b49      	ldr	r3, [pc, #292]	; (8001a1c <HAL_RCC_OscConfig+0xc44>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	e01b      	b.n	8001934 <HAL_RCC_OscConfig+0xb5c>
 80018fc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001900:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001904:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	fa93 f2a3 	rbit	r2, r3
 8001910:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800191a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	fa93 f2a3 	rbit	r2, r3
 800192a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <HAL_RCC_OscConfig+0xc44>)
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001938:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800193c:	6011      	str	r1, [r2, #0]
 800193e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	fa92 f1a2 	rbit	r1, r2
 8001948:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800194c:	6011      	str	r1, [r2, #0]
  return result;
 800194e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	fab2 f282 	clz	r2, r2
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	f042 0220 	orr.w	r2, r2, #32
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	f002 021f 	and.w	r2, r2, #31
 8001964:	2101      	movs	r1, #1
 8001966:	fa01 f202 	lsl.w	r2, r1, r2
 800196a:	4013      	ands	r3, r2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d19e      	bne.n	80018ae <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_RCC_OscConfig+0xc44>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	430b      	orrs	r3, r1
 8001986:	4925      	ldr	r1, [pc, #148]	; (8001a1c <HAL_RCC_OscConfig+0xc44>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
 800198c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001990:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019a4:	601a      	str	r2, [r3, #0]
  return result;
 80019a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019aa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	461a      	mov	r2, r3
 80019be:	2301      	movs	r3, #1
 80019c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7fe ff69 	bl	8000898 <HAL_GetTick>
 80019c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ca:	e009      	b.n	80019e0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019cc:	f7fe ff64 	bl	8000898 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e0fc      	b.n	8001bda <HAL_RCC_OscConfig+0xe02>
 80019e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	fa93 f2a3 	rbit	r2, r3
 80019f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019f8:	601a      	str	r2, [r3, #0]
  return result;
 80019fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <HAL_RCC_OscConfig+0xc48>
 8001a14:	4b01      	ldr	r3, [pc, #4]	; (8001a1c <HAL_RCC_OscConfig+0xc44>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	e01e      	b.n	8001a58 <HAL_RCC_OscConfig+0xc80>
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	fa93 f2a3 	rbit	r2, r3
 8001a34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	fa93 f2a3 	rbit	r2, r3
 8001a4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	4b63      	ldr	r3, [pc, #396]	; (8001be4 <HAL_RCC_OscConfig+0xe0c>)
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a60:	6011      	str	r1, [r2, #0]
 8001a62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	fa92 f1a2 	rbit	r1, r2
 8001a6c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a70:	6011      	str	r1, [r2, #0]
  return result;
 8001a72:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	fab2 f282 	clz	r2, r2
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	f042 0220 	orr.w	r2, r2, #32
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	f002 021f 	and.w	r2, r2, #31
 8001a88:	2101      	movs	r1, #1
 8001a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d09b      	beq.n	80019cc <HAL_RCC_OscConfig+0xbf4>
 8001a94:	e0a0      	b.n	8001bd8 <HAL_RCC_OscConfig+0xe00>
 8001a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aae:	601a      	str	r2, [r3, #0]
  return result;
 8001ab0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ac0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	2300      	movs	r3, #0
 8001aca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7fe fee4 	bl	8000898 <HAL_GetTick>
 8001ad0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	e009      	b.n	8001aea <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7fe fedf 	bl	8000898 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e077      	b.n	8001bda <HAL_RCC_OscConfig+0xe02>
 8001aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b02:	601a      	str	r2, [r3, #0]
  return result;
 8001b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	095b      	lsrs	r3, r3, #5
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d102      	bne.n	8001b24 <HAL_RCC_OscConfig+0xd4c>
 8001b1e:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <HAL_RCC_OscConfig+0xe0c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	e01b      	b.n	8001b5c <HAL_RCC_OscConfig+0xd84>
 8001b24:	f107 0320 	add.w	r3, r7, #32
 8001b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	f107 0320 	add.w	r3, r7, #32
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	fa93 f2a3 	rbit	r2, r3
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	f107 0318 	add.w	r3, r7, #24
 8001b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	f107 0318 	add.w	r3, r7, #24
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fa93 f2a3 	rbit	r2, r3
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <HAL_RCC_OscConfig+0xe0c>)
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	f107 0210 	add.w	r2, r7, #16
 8001b60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b64:	6011      	str	r1, [r2, #0]
 8001b66:	f107 0210 	add.w	r2, r7, #16
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	fa92 f1a2 	rbit	r1, r2
 8001b70:	f107 020c 	add.w	r2, r7, #12
 8001b74:	6011      	str	r1, [r2, #0]
  return result;
 8001b76:	f107 020c 	add.w	r2, r7, #12
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	fab2 f282 	clz	r2, r2
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f042 0220 	orr.w	r2, r2, #32
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f002 021f 	and.w	r2, r2, #31
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d19e      	bne.n	8001ad6 <HAL_RCC_OscConfig+0xcfe>
 8001b98:	e01e      	b.n	8001bd8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e018      	b.n	8001bda <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_RCC_OscConfig+0xe0c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bb0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d108      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001bc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000

08001be8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b09e      	sub	sp, #120	; 0x78
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e162      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b90      	ldr	r3, [pc, #576]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b8d      	ldr	r3, [pc, #564]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	498b      	ldr	r1, [pc, #556]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b89      	ldr	r3, [pc, #548]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e14a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3c:	4b82      	ldr	r3, [pc, #520]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	497f      	ldr	r1, [pc, #508]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 80dc 	beq.w	8001e14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d13c      	bne.n	8001cde <HAL_RCC_ClockConfig+0xf6>
 8001c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d102      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xa6>
 8001c88:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	e00f      	b.n	8001cae <HAL_RCC_ClockConfig+0xc6>
 8001c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	667b      	str	r3, [r7, #100]	; 0x64
 8001c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001caa:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cb2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001cb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cb6:	fa92 f2a2 	rbit	r2, r2
 8001cba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001cbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cbe:	fab2 f282 	clz	r2, r2
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	f042 0220 	orr.w	r2, r2, #32
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f002 021f 	and.w	r2, r2, #31
 8001cce:	2101      	movs	r1, #1
 8001cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d17b      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0f3      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d13c      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x178>
 8001ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cee:	fa93 f3a3 	rbit	r3, r3
 8001cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d102      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x128>
 8001d0a:	4b4f      	ldr	r3, [pc, #316]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	e00f      	b.n	8001d30 <HAL_RCC_ClockConfig+0x148>
 8001d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d22:	643b      	str	r3, [r7, #64]	; 0x40
 8001d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d2c:	4b46      	ldr	r3, [pc, #280]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d34:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d38:	fa92 f2a2 	rbit	r2, r2
 8001d3c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f002 021f 	and.w	r2, r2, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d13a      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0b2      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2de>
 8001d60:	2302      	movs	r3, #2
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d102      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x1a0>
 8001d82:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	e00d      	b.n	8001da4 <HAL_RCC_ClockConfig+0x1bc>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
 8001d94:	2302      	movs	r3, #2
 8001d96:	623b      	str	r3, [r7, #32]
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	fa93 f3a3 	rbit	r3, r3
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	2202      	movs	r2, #2
 8001da6:	61ba      	str	r2, [r7, #24]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	fa92 f2a2 	rbit	r2, r2
 8001dae:	617a      	str	r2, [r7, #20]
  return result;
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	fab2 f282 	clz	r2, r2
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	f042 0220 	orr.w	r2, r2, #32
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	f002 021f 	and.w	r2, r2, #31
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e079      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f023 0203 	bic.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	491a      	ldr	r1, [pc, #104]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de4:	f7fe fd58 	bl	8000898 <HAL_GetTick>
 8001de8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7fe fd54 	bl	8000898 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e061      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 020c 	and.w	r2, r3, #12
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d1eb      	bne.n	8001dec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d214      	bcs.n	8001e4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0207 	bic.w	r2, r3, #7
 8001e2a:	4906      	ldr	r1, [pc, #24]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e040      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x2de>
 8001e44:	40022000 	.word	0x40022000
 8001e48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	491a      	ldr	r1, [pc, #104]	; (8001ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4912      	ldr	r1, [pc, #72]	; (8001ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e8a:	f000 f829 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001e8e:	4601      	mov	r1, r0
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_RCC_ClockConfig+0x2e8>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e98:	22f0      	movs	r2, #240	; 0xf0
 8001e9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	fa92 f2a2 	rbit	r2, r2
 8001ea2:	60fa      	str	r2, [r7, #12]
  return result;
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	fab2 f282 	clz	r2, r2
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	40d3      	lsrs	r3, r2
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x2ec>)
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
 8001eb2:	fa21 f303 	lsr.w	r3, r1, r3
 8001eb6:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <HAL_RCC_ClockConfig+0x2f0>)
 8001eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_RCC_ClockConfig+0x2f4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fca6 	bl	8000810 <HAL_InitTick>
  
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3778      	adds	r7, #120	; 0x78
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08002b34 	.word	0x08002b34
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000004 	.word	0x20000004

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b08b      	sub	sp, #44	; 0x2c
 8001ee4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001efa:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d002      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x30>
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_GetSysClockFreq+0x36>
 8001f0e:	e03c      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f12:	623b      	str	r3, [r7, #32]
      break;
 8001f14:	e03c      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f1c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f20:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	fa92 f2a2 	rbit	r2, r2
 8001f28:	607a      	str	r2, [r7, #4]
  return result;
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	fab2 f282 	clz	r2, r2
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	40d3      	lsrs	r3, r2
 8001f34:	4a1c      	ldr	r2, [pc, #112]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	220f      	movs	r2, #15
 8001f44:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	fa92 f2a2 	rbit	r2, r2
 8001f4c:	60fa      	str	r2, [r7, #12]
  return result;
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	fab2 f282 	clz	r2, r2
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	40d3      	lsrs	r3, r2
 8001f58:	4a14      	ldr	r2, [pc, #80]	; (8001fac <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
 8001f5c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f68:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	e004      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	623b      	str	r3, [r7, #32]
      break;
 8001f88:	e002      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f8c:	623b      	str	r3, [r7, #32]
      break;
 8001f8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f90:	6a3b      	ldr	r3, [r7, #32]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	372c      	adds	r7, #44	; 0x2c
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	007a1200 	.word	0x007a1200
 8001fa8:	08002b44 	.word	0x08002b44
 8001fac:	08002b54 	.word	0x08002b54
 8001fb0:	003d0900 	.word	0x003d0900

08001fb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e09d      	b.n	8002102 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d108      	bne.n	8001fe0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fd6:	d009      	beq.n	8001fec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
 8001fde:	e005      	b.n	8001fec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fb1e 	bl	8000648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002022:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800202c:	d902      	bls.n	8002034 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	e002      	b.n	800203a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002038:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002042:	d007      	beq.n	8002054 <HAL_SPI_Init+0xa0>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800204c:	d002      	beq.n	8002054 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	ea42 0103 	orr.w	r1, r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	f003 0204 	and.w	r2, r3, #4
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020d0:	ea42 0103 	orr.w	r1, r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69da      	ldr	r2, [r3, #28]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b088      	sub	sp, #32
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	4613      	mov	r3, r2
 8002118:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_SPI_Transmit+0x22>
 8002128:	2302      	movs	r3, #2
 800212a:	e158      	b.n	80023de <HAL_SPI_Transmit+0x2d4>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002134:	f7fe fbb0 	bl	8000898 <HAL_GetTick>
 8002138:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d002      	beq.n	8002150 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800214a:	2302      	movs	r3, #2
 800214c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800214e:	e13d      	b.n	80023cc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <HAL_SPI_Transmit+0x52>
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d102      	bne.n	8002162 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002160:	e134      	b.n	80023cc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2203      	movs	r2, #3
 8002166:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	88fa      	ldrh	r2, [r7, #6]
 800217a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	88fa      	ldrh	r2, [r7, #6]
 8002180:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021ac:	d10f      	bne.n	80021ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d8:	2b40      	cmp	r3, #64	; 0x40
 80021da:	d007      	beq.n	80021ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021f4:	d94b      	bls.n	800228e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <HAL_SPI_Transmit+0xfa>
 80021fe:	8afb      	ldrh	r3, [r7, #22]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d13e      	bne.n	8002282 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	881a      	ldrh	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002214:	1c9a      	adds	r2, r3, #2
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002228:	e02b      	b.n	8002282 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b02      	cmp	r3, #2
 8002236:	d112      	bne.n	800225e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223c:	881a      	ldrh	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	1c9a      	adds	r2, r3, #2
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800225c:	e011      	b.n	8002282 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800225e:	f7fe fb1b 	bl	8000898 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d803      	bhi.n	8002276 <HAL_SPI_Transmit+0x16c>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d102      	bne.n	800227c <HAL_SPI_Transmit+0x172>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002280:	e0a4      	b.n	80023cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002286:	b29b      	uxth	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1ce      	bne.n	800222a <HAL_SPI_Transmit+0x120>
 800228c:	e07c      	b.n	8002388 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_SPI_Transmit+0x192>
 8002296:	8afb      	ldrh	r3, [r7, #22]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d170      	bne.n	800237e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d912      	bls.n	80022cc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	881a      	ldrh	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	1c9a      	adds	r2, r3, #2
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b02      	subs	r3, #2
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022ca:	e058      	b.n	800237e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	330c      	adds	r3, #12
 80022d6:	7812      	ldrb	r2, [r2, #0]
 80022d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80022f2:	e044      	b.n	800237e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d12b      	bne.n	800235a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d912      	bls.n	8002332 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	881a      	ldrh	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231c:	1c9a      	adds	r2, r3, #2
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b02      	subs	r3, #2
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002330:	e025      	b.n	800237e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	330c      	adds	r3, #12
 800233c:	7812      	ldrb	r2, [r2, #0]
 800233e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002358:	e011      	b.n	800237e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800235a:	f7fe fa9d 	bl	8000898 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d803      	bhi.n	8002372 <HAL_SPI_Transmit+0x268>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d102      	bne.n	8002378 <HAL_SPI_Transmit+0x26e>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800237c:	e026      	b.n	80023cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1b5      	bne.n	80022f4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	6839      	ldr	r1, [r7, #0]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f941 	bl	8002614 <SPI_EndRxTxTransaction>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	77fb      	strb	r3, [r7, #31]
 80023c8:	e000      	b.n	80023cc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80023ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80023dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3720      	adds	r7, #32
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023f8:	f7fe fa4e 	bl	8000898 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	4413      	add	r3, r2
 8002406:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002408:	f7fe fa46 	bl	8000898 <HAL_GetTick>
 800240c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800240e:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	015b      	lsls	r3, r3, #5
 8002414:	0d1b      	lsrs	r3, r3, #20
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	fb02 f303 	mul.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800241e:	e054      	b.n	80024ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002426:	d050      	beq.n	80024ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002428:	f7fe fa36 	bl	8000898 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	429a      	cmp	r2, r3
 8002436:	d902      	bls.n	800243e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d13d      	bne.n	80024ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800244c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002456:	d111      	bne.n	800247c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002460:	d004      	beq.n	800246c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246a:	d107      	bne.n	800247c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800247a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002484:	d10f      	bne.n	80024a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e017      	b.n	80024ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4013      	ands	r3, r2
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	bf0c      	ite	eq
 80024da:	2301      	moveq	r3, #1
 80024dc:	2300      	movne	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d19b      	bne.n	8002420 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000000 	.word	0x20000000

080024f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002506:	f7fe f9c7 	bl	8000898 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	4413      	add	r3, r2
 8002514:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002516:	f7fe f9bf 	bl	8000898 <HAL_GetTick>
 800251a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800251c:	4b3c      	ldr	r3, [pc, #240]	; (8002610 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	00da      	lsls	r2, r3, #3
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	0d1b      	lsrs	r3, r3, #20
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002534:	e05f      	b.n	80025f6 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800253c:	d106      	bne.n	800254c <SPI_WaitFifoStateUntilTimeout+0x54>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d103      	bne.n	800254c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002552:	d050      	beq.n	80025f6 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002554:	f7fe f9a0 	bl	8000898 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	429a      	cmp	r2, r3
 8002562:	d902      	bls.n	800256a <SPI_WaitFifoStateUntilTimeout+0x72>
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d13d      	bne.n	80025e6 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002578:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002582:	d111      	bne.n	80025a8 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800258c:	d004      	beq.n	8002598 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002596:	d107      	bne.n	80025a8 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b0:	d10f      	bne.n	80025d2 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e010      	b.n	8002608 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4013      	ands	r3, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	429a      	cmp	r2, r3
 8002604:	d197      	bne.n	8002536 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000000 	.word	0x20000000

08002614 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2200      	movs	r2, #0
 8002628:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff ff63 	bl	80024f8 <SPI_WaitFifoStateUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263c:	f043 0220 	orr.w	r2, r3, #32
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e027      	b.n	8002698 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2200      	movs	r2, #0
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f7ff fec8 	bl	80023e8 <SPI_WaitFlagStateUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002662:	f043 0220 	orr.w	r2, r3, #32
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e014      	b.n	8002698 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f7ff ff3c 	bl	80024f8 <SPI_WaitFifoStateUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268a:	f043 0220 	orr.w	r2, r3, #32
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e000      	b.n	8002698 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <__libc_init_array>:
 80026a0:	b570      	push	{r4, r5, r6, lr}
 80026a2:	4d0d      	ldr	r5, [pc, #52]	; (80026d8 <__libc_init_array+0x38>)
 80026a4:	4c0d      	ldr	r4, [pc, #52]	; (80026dc <__libc_init_array+0x3c>)
 80026a6:	1b64      	subs	r4, r4, r5
 80026a8:	10a4      	asrs	r4, r4, #2
 80026aa:	2600      	movs	r6, #0
 80026ac:	42a6      	cmp	r6, r4
 80026ae:	d109      	bne.n	80026c4 <__libc_init_array+0x24>
 80026b0:	4d0b      	ldr	r5, [pc, #44]	; (80026e0 <__libc_init_array+0x40>)
 80026b2:	4c0c      	ldr	r4, [pc, #48]	; (80026e4 <__libc_init_array+0x44>)
 80026b4:	f000 f82e 	bl	8002714 <_init>
 80026b8:	1b64      	subs	r4, r4, r5
 80026ba:	10a4      	asrs	r4, r4, #2
 80026bc:	2600      	movs	r6, #0
 80026be:	42a6      	cmp	r6, r4
 80026c0:	d105      	bne.n	80026ce <__libc_init_array+0x2e>
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
 80026c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c8:	4798      	blx	r3
 80026ca:	3601      	adds	r6, #1
 80026cc:	e7ee      	b.n	80026ac <__libc_init_array+0xc>
 80026ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d2:	4798      	blx	r3
 80026d4:	3601      	adds	r6, #1
 80026d6:	e7f2      	b.n	80026be <__libc_init_array+0x1e>
 80026d8:	08002b64 	.word	0x08002b64
 80026dc:	08002b64 	.word	0x08002b64
 80026e0:	08002b64 	.word	0x08002b64
 80026e4:	08002b68 	.word	0x08002b68

080026e8 <memcpy>:
 80026e8:	440a      	add	r2, r1
 80026ea:	4291      	cmp	r1, r2
 80026ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80026f0:	d100      	bne.n	80026f4 <memcpy+0xc>
 80026f2:	4770      	bx	lr
 80026f4:	b510      	push	{r4, lr}
 80026f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026fe:	4291      	cmp	r1, r2
 8002700:	d1f9      	bne.n	80026f6 <memcpy+0xe>
 8002702:	bd10      	pop	{r4, pc}

08002704 <memset>:
 8002704:	4402      	add	r2, r0
 8002706:	4603      	mov	r3, r0
 8002708:	4293      	cmp	r3, r2
 800270a:	d100      	bne.n	800270e <memset+0xa>
 800270c:	4770      	bx	lr
 800270e:	f803 1b01 	strb.w	r1, [r3], #1
 8002712:	e7f9      	b.n	8002708 <memset+0x4>

08002714 <_init>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr

08002720 <_fini>:
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	bf00      	nop
 8002724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002726:	bc08      	pop	{r3}
 8002728:	469e      	mov	lr, r3
 800272a:	4770      	bx	lr
