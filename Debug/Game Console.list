
Game Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08002534  08002534  00012534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800275c  0800275c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800275c  0800275c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800275c  0800275c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800275c  0800275c  0001275c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000000c  08002770  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08002770  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a8c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b1  00000000  00000000  00027ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  00029180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000570  00000000  00000000  000297b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9aa  00000000  00000000  00029d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008561  00000000  00000000  000446d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098eb5  00000000  00000000  0004cc33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5ae8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001724  00000000  00000000  000e5b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800251c 	.word	0x0800251c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800251c 	.word	0x0800251c

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001de:	4b24      	ldr	r3, [pc, #144]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a23      	ldr	r2, [pc, #140]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b21      	ldr	r3, [pc, #132]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001f6:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a1d      	ldr	r2, [pc, #116]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	4b18      	ldr	r3, [pc, #96]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a17      	ldr	r2, [pc, #92]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b15      	ldr	r3, [pc, #84]	; (8000270 <MX_GPIO_Init+0xa8>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a11      	ldr	r2, [pc, #68]	; (8000270 <MX_GPIO_Init+0xa8>)
 800022c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|CE_Pin|RESET_Pin, GPIO_PIN_SET);
 800023e:	2201      	movs	r2, #1
 8000240:	2170      	movs	r1, #112	; 0x70
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f000 fcb3 	bl	8000bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DC_Pin|CE_Pin|RESET_Pin;
 800024a:	2370      	movs	r3, #112	; 0x70
 800024c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024e:	2301      	movs	r3, #1
 8000250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000252:	2300      	movs	r3, #0
 8000254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000256:	2300      	movs	r3, #0
 8000258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800025a:	f107 0314 	add.w	r3, r7, #20
 800025e:	4619      	mov	r1, r3
 8000260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000264:	f000 fb32 	bl	80008cc <HAL_GPIO_Init>

}
 8000268:	bf00      	nop
 800026a:	3728      	adds	r7, #40	; 0x28
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40021000 	.word	0x40021000

08000274 <lcd_reset>:
#include "font.h"

static uint8_t lcd_buffer[LCD_BUFFER_SIZE];

void lcd_reset()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2140      	movs	r1, #64	; 0x40
 800027c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000280:	f000 fc96 	bl	8000bb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000284:	2201      	movs	r2, #1
 8000286:	2140      	movs	r1, #64	; 0x40
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f000 fc90 	bl	8000bb0 <HAL_GPIO_WritePin>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}

08000294 <lcd_cmd>:

void lcd_cmd(uint8_t cmd)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, CE_Pin|DC_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2130      	movs	r1, #48	; 0x30
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a6:	f000 fc83 	bl	8000bb0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80002aa:	1df9      	adds	r1, r7, #7
 80002ac:	f04f 33ff 	mov.w	r3, #4294967295
 80002b0:	2201      	movs	r2, #1
 80002b2:	4806      	ldr	r0, [pc, #24]	; (80002cc <lcd_cmd+0x38>)
 80002b4:	f001 fe2d 	bl	8001f12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CE_Pin|DC_Pin, GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2130      	movs	r1, #48	; 0x30
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c0:	f000 fc76 	bl	8000bb0 <HAL_GPIO_WritePin>
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000220 	.word	0x20000220

080002d0 <lcd_send>:

void lcd_send(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2120      	movs	r1, #32
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f000 fc68 	bl	8000bb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e8:	f000 fc62 	bl	8000bb0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, lcd_buffer, LCD_BUFFER_SIZE, HAL_MAX_DELAY);
 80002ec:	f04f 33ff 	mov.w	r3, #4294967295
 80002f0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80002f4:	4905      	ldr	r1, [pc, #20]	; (800030c <lcd_send+0x3c>)
 80002f6:	4806      	ldr	r0, [pc, #24]	; (8000310 <lcd_send+0x40>)
 80002f8:	f001 fe0b 	bl	8001f12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	2120      	movs	r1, #32
 8000300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000304:	f000 fc54 	bl	8000bb0 <HAL_GPIO_WritePin>
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000028 	.word	0x20000028
 8000310:	20000220 	.word	0x20000220

08000314 <lcd_draw_bitmap>:
{
	memset(lcd_buffer, 0, LCD_BUFFER_SIZE);
}

void lcd_draw_bitmap(const uint8_t* data)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	memcpy(lcd_buffer, data, LCD_BUFFER_SIZE);
 800031c:	4a06      	ldr	r2, [pc, #24]	; (8000338 <lcd_draw_bitmap+0x24>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4610      	mov	r0, r2
 8000322:	4619      	mov	r1, r3
 8000324:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000328:	461a      	mov	r2, r3
 800032a:	f002 f8e1 	bl	80024f0 <memcpy>
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000028 	.word	0x20000028

0800033c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000340:	f000 f978 	bl	8000634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000344:	f000 f82a 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000348:	f7ff ff3e 	bl	80001c8 <MX_GPIO_Init>
  MX_SPI2_Init();
 800034c:	f000 f866 	bl	800041c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 8000350:	2201      	movs	r2, #1
 8000352:	2120      	movs	r1, #32
 8000354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000358:	f000 fc2a 	bl	8000bb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800035c:	2201      	movs	r2, #1
 800035e:	2140      	movs	r1, #64	; 0x40
 8000360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000364:	f000 fc24 	bl	8000bb0 <HAL_GPIO_WritePin>

  lcd_reset();
 8000368:	f7ff ff84 	bl	8000274 <lcd_reset>

  lcd_cmd(0x21);
 800036c:	2021      	movs	r0, #33	; 0x21
 800036e:	f7ff ff91 	bl	8000294 <lcd_cmd>
  lcd_cmd(0x14);
 8000372:	2014      	movs	r0, #20
 8000374:	f7ff ff8e 	bl	8000294 <lcd_cmd>
  lcd_cmd(0x80 | 0x1f); //Ustawienie kontrastu
 8000378:	209f      	movs	r0, #159	; 0x9f
 800037a:	f7ff ff8b 	bl	8000294 <lcd_cmd>
  lcd_cmd(0x20);
 800037e:	2020      	movs	r0, #32
 8000380:	f7ff ff88 	bl	8000294 <lcd_cmd>
  lcd_cmd(0x0c);
 8000384:	200c      	movs	r0, #12
 8000386:	f7ff ff85 	bl	8000294 <lcd_cmd>

  lcd_draw_bitmap(game_icon);
 800038a:	4803      	ldr	r0, [pc, #12]	; (8000398 <main+0x5c>)
 800038c:	f7ff ffc2 	bl	8000314 <lcd_draw_bitmap>
  lcd_send();
 8000390:	f7ff ff9e 	bl	80002d0 <lcd_send>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000394:	e7fe      	b.n	8000394 <main+0x58>
 8000396:	bf00      	nop
 8000398:	08002534 	.word	0x08002534

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b090      	sub	sp, #64	; 0x40
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0318 	add.w	r3, r7, #24
 80003a6:	2228      	movs	r2, #40	; 0x28
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f002 f8ae 	bl	800250c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003be:	2302      	movs	r3, #2
 80003c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c2:	2301      	movs	r3, #1
 80003c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c6:	2310      	movs	r3, #16
 80003c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ce:	f107 0318 	add.w	r3, r7, #24
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 fc04 	bl	8000be0 <HAL_RCC_OscConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003de:	f000 f818 	bl	8000412 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	230f      	movs	r3, #15
 80003e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003e6:	2300      	movs	r3, #0
 80003e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2100      	movs	r1, #0
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 faf8 	bl	80019f0 <HAL_RCC_ClockConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000406:	f000 f804 	bl	8000412 <Error_Handler>
  }
}
 800040a:	bf00      	nop
 800040c:	3740      	adds	r7, #64	; 0x40
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000416:	b672      	cpsid	i
}
 8000418:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041a:	e7fe      	b.n	800041a <Error_Handler+0x8>

0800041c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_SPI2_Init+0x74>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <MX_SPI2_Init+0x78>)
 8000424:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <MX_SPI2_Init+0x74>)
 8000428:	f44f 7282 	mov.w	r2, #260	; 0x104
 800042c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800042e:	4b18      	ldr	r3, [pc, #96]	; (8000490 <MX_SPI2_Init+0x74>)
 8000430:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000434:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000436:	4b16      	ldr	r3, [pc, #88]	; (8000490 <MX_SPI2_Init+0x74>)
 8000438:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800043c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800043e:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_SPI2_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <MX_SPI2_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_SPI2_Init+0x74>)
 800044c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000450:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <MX_SPI2_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <MX_SPI2_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <MX_SPI2_Init+0x74>)
 8000460:	2200      	movs	r2, #0
 8000462:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <MX_SPI2_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <MX_SPI2_Init+0x74>)
 800046c:	2207      	movs	r2, #7
 800046e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000470:	4b07      	ldr	r3, [pc, #28]	; (8000490 <MX_SPI2_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <MX_SPI2_Init+0x74>)
 8000478:	2208      	movs	r2, #8
 800047a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <MX_SPI2_Init+0x74>)
 800047e:	f001 fc9d 	bl	8001dbc <HAL_SPI_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000488:	f7ff ffc3 	bl	8000412 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000220 	.word	0x20000220
 8000494:	40003800 	.word	0x40003800

08000498 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	; 0x28
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a17      	ldr	r2, [pc, #92]	; (8000514 <HAL_SPI_MspInit+0x7c>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d128      	bne.n	800050c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004ba:	4b17      	ldr	r3, [pc, #92]	; (8000518 <HAL_SPI_MspInit+0x80>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a16      	ldr	r2, [pc, #88]	; (8000518 <HAL_SPI_MspInit+0x80>)
 80004c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b14      	ldr	r3, [pc, #80]	; (8000518 <HAL_SPI_MspInit+0x80>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <HAL_SPI_MspInit+0x80>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a10      	ldr	r2, [pc, #64]	; (8000518 <HAL_SPI_MspInit+0x80>)
 80004d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_SPI_MspInit+0x80>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80004ea:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f0:	2302      	movs	r3, #2
 80004f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f8:	2303      	movs	r3, #3
 80004fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80004fc:	2305      	movs	r3, #5
 80004fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4619      	mov	r1, r3
 8000506:	4805      	ldr	r0, [pc, #20]	; (800051c <HAL_SPI_MspInit+0x84>)
 8000508:	f000 f9e0 	bl	80008cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800050c:	bf00      	nop
 800050e:	3728      	adds	r7, #40	; 0x28
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40003800 	.word	0x40003800
 8000518:	40021000 	.word	0x40021000
 800051c:	48000400 	.word	0x48000400

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x44>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_MspInit+0x44>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x44>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_MspInit+0x44>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <HAL_MspInit+0x44>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000548:	61d3      	str	r3, [r2, #28]
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_MspInit+0x44>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800056c:	e7fe      	b.n	800056c <NMI_Handler+0x4>

0800056e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <HardFault_Handler+0x4>

08000574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <MemManage_Handler+0x4>

0800057a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <BusFault_Handler+0x4>

08000580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <UsageFault_Handler+0x4>

08000586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b4:	f000 f884 	bl	80006c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <SystemInit+0x20>)
 80005c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005c6:	4a05      	ldr	r2, [pc, #20]	; (80005dc <SystemInit+0x20>)
 80005c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000618 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <LoopForever+0x6>)
  ldr r1, =_edata
 80005e6:	490e      	ldr	r1, [pc, #56]	; (8000620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e8:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <LoopForever+0xe>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005fc:	4c0b      	ldr	r4, [pc, #44]	; (800062c <LoopForever+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800060a:	f7ff ffd7 	bl	80005bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800060e:	f001 ff4b 	bl	80024a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000612:	f7ff fe93 	bl	800033c <main>

08000616 <LoopForever>:

LoopForever:
    b LoopForever
 8000616:	e7fe      	b.n	8000616 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000618:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000624:	08002764 	.word	0x08002764
  ldr r2, =_sbss
 8000628:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800062c:	20000288 	.word	0x20000288

08000630 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_IRQHandler>
	...

08000634 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <HAL_Init+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <HAL_Init+0x28>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000644:	2003      	movs	r0, #3
 8000646:	f000 f90d 	bl	8000864 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064a:	2000      	movs	r0, #0
 800064c:	f000 f808 	bl	8000660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000650:	f7ff ff66 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_InitTick+0x54>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_InitTick+0x58>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000676:	fbb3 f3f1 	udiv	r3, r3, r1
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 f917 	bl	80008b2 <HAL_SYSTICK_Config>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e00e      	b.n	80006ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d80a      	bhi.n	80006aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000694:	2200      	movs	r2, #0
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f000 f8ed 	bl	800087a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <HAL_InitTick+0x5c>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e000      	b.n	80006ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000008 	.word	0x20000008
 80006bc:	20000004 	.word	0x20000004

080006c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_IncTick+0x20>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_IncTick+0x24>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <HAL_IncTick+0x24>)
 80006d2:	6013      	str	r3, [r2, #0]
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	20000008 	.word	0x20000008
 80006e4:	20000284 	.word	0x20000284

080006e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <HAL_GetTick+0x14>)
 80006ee:	681b      	ldr	r3, [r3, #0]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000284 	.word	0x20000284

08000700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800071c:	4013      	ands	r3, r2
 800071e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000732:	4a04      	ldr	r2, [pc, #16]	; (8000744 <__NVIC_SetPriorityGrouping+0x44>)
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	60d3      	str	r3, [r2, #12]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <__NVIC_GetPriorityGrouping+0x18>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	f003 0307 	and.w	r3, r3, #7
}
 8000756:	4618      	mov	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	db0a      	blt.n	800078e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	490c      	ldr	r1, [pc, #48]	; (80007b0 <__NVIC_SetPriority+0x4c>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800078c:	e00a      	b.n	80007a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4908      	ldr	r1, [pc, #32]	; (80007b4 <__NVIC_SetPriority+0x50>)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	f003 030f 	and.w	r3, r3, #15
 800079a:	3b04      	subs	r3, #4
 800079c:	0112      	lsls	r2, r2, #4
 800079e:	b2d2      	uxtb	r2, r2
 80007a0:	440b      	add	r3, r1
 80007a2:	761a      	strb	r2, [r3, #24]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000e100 	.word	0xe000e100
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b089      	sub	sp, #36	; 0x24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	f1c3 0307 	rsb	r3, r3, #7
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	bf28      	it	cs
 80007d6:	2304      	movcs	r3, #4
 80007d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	3304      	adds	r3, #4
 80007de:	2b06      	cmp	r3, #6
 80007e0:	d902      	bls.n	80007e8 <NVIC_EncodePriority+0x30>
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3b03      	subs	r3, #3
 80007e6:	e000      	b.n	80007ea <NVIC_EncodePriority+0x32>
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43da      	mvns	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	401a      	ands	r2, r3
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000800:	f04f 31ff 	mov.w	r1, #4294967295
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	43d9      	mvns	r1, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000810:	4313      	orrs	r3, r2
         );
}
 8000812:	4618      	mov	r0, r3
 8000814:	3724      	adds	r7, #36	; 0x24
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000830:	d301      	bcc.n	8000836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000832:	2301      	movs	r3, #1
 8000834:	e00f      	b.n	8000856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <SysTick_Config+0x40>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800083e:	210f      	movs	r1, #15
 8000840:	f04f 30ff 	mov.w	r0, #4294967295
 8000844:	f7ff ff8e 	bl	8000764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <SysTick_Config+0x40>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084e:	4b04      	ldr	r3, [pc, #16]	; (8000860 <SysTick_Config+0x40>)
 8000850:	2207      	movs	r2, #7
 8000852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	e000e010 	.word	0xe000e010

08000864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ff47 	bl	8000700 <__NVIC_SetPriorityGrouping>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b086      	sub	sp, #24
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800088c:	f7ff ff5c 	bl	8000748 <__NVIC_GetPriorityGrouping>
 8000890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	6978      	ldr	r0, [r7, #20]
 8000898:	f7ff ff8e 	bl	80007b8 <NVIC_EncodePriority>
 800089c:	4602      	mov	r2, r0
 800089e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff5d 	bl	8000764 <__NVIC_SetPriority>
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffb0 	bl	8000820 <SysTick_Config>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008da:	e14e      	b.n	8000b7a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	2101      	movs	r1, #1
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	fa01 f303 	lsl.w	r3, r1, r3
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f000 8140 	beq.w	8000b74 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d00b      	beq.n	8000914 <HAL_GPIO_Init+0x48>
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	2b02      	cmp	r3, #2
 8000902:	d007      	beq.n	8000914 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000908:	2b11      	cmp	r3, #17
 800090a:	d003      	beq.n	8000914 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b12      	cmp	r3, #18
 8000912:	d130      	bne.n	8000976 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	2203      	movs	r2, #3
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68da      	ldr	r2, [r3, #12]
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	693a      	ldr	r2, [r7, #16]
 800093a:	4313      	orrs	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800094a:	2201      	movs	r2, #1
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4013      	ands	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	091b      	lsrs	r3, r3, #4
 8000960:	f003 0201 	and.w	r2, r3, #1
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	2203      	movs	r2, #3
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	4013      	ands	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	689a      	ldr	r2, [r3, #8]
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d003      	beq.n	80009b6 <HAL_GPIO_Init+0xea>
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	2b12      	cmp	r3, #18
 80009b4:	d123      	bne.n	80009fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	08da      	lsrs	r2, r3, #3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3208      	adds	r2, #8
 80009be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	691a      	ldr	r2, [r3, #16]
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f003 0307 	and.w	r3, r3, #7
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	08da      	lsrs	r2, r3, #3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3208      	adds	r2, #8
 80009f8:	6939      	ldr	r1, [r7, #16]
 80009fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	2203      	movs	r2, #3
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4013      	ands	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f003 0203 	and.w	r2, r3, #3
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	f000 809a 	beq.w	8000b74 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a40:	4b55      	ldr	r3, [pc, #340]	; (8000b98 <HAL_GPIO_Init+0x2cc>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a54      	ldr	r2, [pc, #336]	; (8000b98 <HAL_GPIO_Init+0x2cc>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b52      	ldr	r3, [pc, #328]	; (8000b98 <HAL_GPIO_Init+0x2cc>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a58:	4a50      	ldr	r2, [pc, #320]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	3302      	adds	r3, #2
 8000a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	f003 0303 	and.w	r3, r3, #3
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	220f      	movs	r2, #15
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a82:	d013      	beq.n	8000aac <HAL_GPIO_Init+0x1e0>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a46      	ldr	r2, [pc, #280]	; (8000ba0 <HAL_GPIO_Init+0x2d4>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d00d      	beq.n	8000aa8 <HAL_GPIO_Init+0x1dc>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a45      	ldr	r2, [pc, #276]	; (8000ba4 <HAL_GPIO_Init+0x2d8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d007      	beq.n	8000aa4 <HAL_GPIO_Init+0x1d8>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a44      	ldr	r2, [pc, #272]	; (8000ba8 <HAL_GPIO_Init+0x2dc>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d101      	bne.n	8000aa0 <HAL_GPIO_Init+0x1d4>
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	e006      	b.n	8000aae <HAL_GPIO_Init+0x1e2>
 8000aa0:	2305      	movs	r3, #5
 8000aa2:	e004      	b.n	8000aae <HAL_GPIO_Init+0x1e2>
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	e002      	b.n	8000aae <HAL_GPIO_Init+0x1e2>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <HAL_GPIO_Init+0x1e2>
 8000aac:	2300      	movs	r3, #0
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	f002 0203 	and.w	r2, r2, #3
 8000ab4:	0092      	lsls	r2, r2, #2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000abe:	4937      	ldr	r1, [pc, #220]	; (8000b9c <HAL_GPIO_Init+0x2d0>)
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	089b      	lsrs	r3, r3, #2
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000acc:	4b37      	ldr	r3, [pc, #220]	; (8000bac <HAL_GPIO_Init+0x2e0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000af0:	4a2e      	ldr	r2, [pc, #184]	; (8000bac <HAL_GPIO_Init+0x2e0>)
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000af6:	4b2d      	ldr	r3, [pc, #180]	; (8000bac <HAL_GPIO_Init+0x2e0>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	43db      	mvns	r3, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b1a:	4a24      	ldr	r2, [pc, #144]	; (8000bac <HAL_GPIO_Init+0x2e0>)
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <HAL_GPIO_Init+0x2e0>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_GPIO_Init+0x2e0>)
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_GPIO_Init+0x2e0>)
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_GPIO_Init+0x2e0>)
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3301      	adds	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	fa22 f303 	lsr.w	r3, r2, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f47f aea9 	bne.w	80008dc <HAL_GPIO_Init+0x10>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	371c      	adds	r7, #28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	48000400 	.word	0x48000400
 8000ba4:	48000800 	.word	0x48000800
 8000ba8:	48000c00 	.word	0x48000c00
 8000bac:	40010400 	.word	0x40010400

08000bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bc0:	787b      	ldrb	r3, [r7, #1]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bcc:	e002      	b.n	8000bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f000 bef4 	b.w	80019e2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f000 816a 	beq.w	8000ede <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c0a:	4bb3      	ldr	r3, [pc, #716]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 030c 	and.w	r3, r3, #12
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d00c      	beq.n	8000c30 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c16:	4bb0      	ldr	r3, [pc, #704]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 030c 	and.w	r3, r3, #12
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d159      	bne.n	8000cd6 <HAL_RCC_OscConfig+0xf6>
 8000c22:	4bad      	ldr	r3, [pc, #692]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2e:	d152      	bne.n	8000cd6 <HAL_RCC_OscConfig+0xf6>
 8000c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c34:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c38:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c3c:	fa93 f3a3 	rbit	r3, r3
 8000c40:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c44:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c48:	fab3 f383 	clz	r3, r3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d102      	bne.n	8000c62 <HAL_RCC_OscConfig+0x82>
 8000c5c:	4b9e      	ldr	r3, [pc, #632]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	e015      	b.n	8000c8e <HAL_RCC_OscConfig+0xae>
 8000c62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c66:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c6a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000c6e:	fa93 f3a3 	rbit	r3, r3
 8000c72:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c7a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c7e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c82:	fa93 f3a3 	rbit	r3, r3
 8000c86:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c8a:	4b93      	ldr	r3, [pc, #588]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c92:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c96:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c9a:	fa92 f2a2 	rbit	r2, r2
 8000c9e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000ca2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000ca6:	fab2 f282 	clz	r2, r2
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	f042 0220 	orr.w	r2, r2, #32
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	f002 021f 	and.w	r2, r2, #31
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 810c 	beq.w	8000edc <HAL_RCC_OscConfig+0x2fc>
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f040 8106 	bne.w	8000edc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f000 be86 	b.w	80019e2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce0:	d106      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x110>
 8000ce2:	4b7d      	ldr	r3, [pc, #500]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a7c      	ldr	r2, [pc, #496]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e030      	b.n	8000d52 <HAL_RCC_OscConfig+0x172>
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d10c      	bne.n	8000d14 <HAL_RCC_OscConfig+0x134>
 8000cfa:	4b77      	ldr	r3, [pc, #476]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a76      	ldr	r2, [pc, #472]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	4b74      	ldr	r3, [pc, #464]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a73      	ldr	r2, [pc, #460]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e01e      	b.n	8000d52 <HAL_RCC_OscConfig+0x172>
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d1e:	d10c      	bne.n	8000d3a <HAL_RCC_OscConfig+0x15a>
 8000d20:	4b6d      	ldr	r3, [pc, #436]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a6c      	ldr	r2, [pc, #432]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000d26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b6a      	ldr	r3, [pc, #424]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a69      	ldr	r2, [pc, #420]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e00b      	b.n	8000d52 <HAL_RCC_OscConfig+0x172>
 8000d3a:	4b67      	ldr	r3, [pc, #412]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a66      	ldr	r2, [pc, #408]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	4b64      	ldr	r3, [pc, #400]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a63      	ldr	r2, [pc, #396]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d50:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d52:	4b61      	ldr	r3, [pc, #388]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d56:	f023 020f 	bic.w	r2, r3, #15
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	495d      	ldr	r1, [pc, #372]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d059      	beq.n	8000e24 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fcba 	bl	80006e8 <HAL_GetTick>
 8000d74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d78:	e00a      	b.n	8000d90 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d7a:	f7ff fcb5 	bl	80006e8 <HAL_GetTick>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b64      	cmp	r3, #100	; 0x64
 8000d88:	d902      	bls.n	8000d90 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	f000 be29 	b.w	80019e2 <HAL_RCC_OscConfig+0xe02>
 8000d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d94:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d98:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d9c:	fa93 f3a3 	rbit	r3, r3
 8000da0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000da4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da8:	fab3 f383 	clz	r3, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d102      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x1e2>
 8000dbc:	4b46      	ldr	r3, [pc, #280]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	e015      	b.n	8000dee <HAL_RCC_OscConfig+0x20e>
 8000dc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dca:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000dce:	fa93 f3a3 	rbit	r3, r3
 8000dd2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dda:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000dde:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000de2:	fa93 f3a3 	rbit	r3, r3
 8000de6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000dea:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000df2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000df6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000dfa:	fa92 f2a2 	rbit	r2, r2
 8000dfe:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000e02:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	b2d2      	uxtb	r2, r2
 8000e0c:	f042 0220 	orr.w	r2, r2, #32
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	f002 021f 	and.w	r2, r2, #31
 8000e16:	2101      	movs	r1, #1
 8000e18:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0ab      	beq.n	8000d7a <HAL_RCC_OscConfig+0x19a>
 8000e22:	e05c      	b.n	8000ede <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e24:	f7ff fc60 	bl	80006e8 <HAL_GetTick>
 8000e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e2c:	e00a      	b.n	8000e44 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e2e:	f7ff fc5b 	bl	80006e8 <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b64      	cmp	r3, #100	; 0x64
 8000e3c:	d902      	bls.n	8000e44 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	f000 bdcf 	b.w	80019e2 <HAL_RCC_OscConfig+0xe02>
 8000e44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e48:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000e50:	fa93 f3a3 	rbit	r3, r3
 8000e54:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000e58:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5c:	fab3 f383 	clz	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d102      	bne.n	8000e76 <HAL_RCC_OscConfig+0x296>
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	e015      	b.n	8000ea2 <HAL_RCC_OscConfig+0x2c2>
 8000e76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000e82:	fa93 f3a3 	rbit	r3, r3
 8000e86:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e8e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e92:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e96:	fa93 f3a3 	rbit	r3, r3
 8000e9a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_RCC_OscConfig+0x2f8>)
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ea6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000eaa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000eae:	fa92 f2a2 	rbit	r2, r2
 8000eb2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000eb6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000eba:	fab2 f282 	clz	r2, r2
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	f042 0220 	orr.w	r2, r2, #32
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	f002 021f 	and.w	r2, r2, #31
 8000eca:	2101      	movs	r1, #1
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1ab      	bne.n	8000e2e <HAL_RCC_OscConfig+0x24e>
 8000ed6:	e002      	b.n	8000ede <HAL_RCC_OscConfig+0x2fe>
 8000ed8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 816f 	beq.w	80011cc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eee:	4bd0      	ldr	r3, [pc, #832]	; (8001230 <HAL_RCC_OscConfig+0x650>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00b      	beq.n	8000f12 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000efa:	4bcd      	ldr	r3, [pc, #820]	; (8001230 <HAL_RCC_OscConfig+0x650>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f003 030c 	and.w	r3, r3, #12
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d16c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x400>
 8000f06:	4bca      	ldr	r3, [pc, #808]	; (8001230 <HAL_RCC_OscConfig+0x650>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d166      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x400>
 8000f12:	2302      	movs	r3, #2
 8000f14:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f18:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000f1c:	fa93 f3a3 	rbit	r3, r3
 8000f20:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000f24:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f28:	fab3 f383 	clz	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d102      	bne.n	8000f42 <HAL_RCC_OscConfig+0x362>
 8000f3c:	4bbc      	ldr	r3, [pc, #752]	; (8001230 <HAL_RCC_OscConfig+0x650>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	e013      	b.n	8000f6a <HAL_RCC_OscConfig+0x38a>
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f48:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f4c:	fa93 f3a3 	rbit	r3, r3
 8000f50:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f54:	2302      	movs	r3, #2
 8000f56:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f5a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f66:	4bb2      	ldr	r3, [pc, #712]	; (8001230 <HAL_RCC_OscConfig+0x650>)
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000f70:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f74:	fa92 f2a2 	rbit	r2, r2
 8000f78:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000f7c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f80:	fab2 f282 	clz	r2, r2
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	f042 0220 	orr.w	r2, r2, #32
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	f002 021f 	and.w	r2, r2, #31
 8000f90:	2101      	movs	r1, #1
 8000f92:	fa01 f202 	lsl.w	r2, r1, r2
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d007      	beq.n	8000fac <HAL_RCC_OscConfig+0x3cc>
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d002      	beq.n	8000fac <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	f000 bd1b 	b.w	80019e2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fac:	4ba0      	ldr	r3, [pc, #640]	; (8001230 <HAL_RCC_OscConfig+0x650>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	21f8      	movs	r1, #248	; 0xf8
 8000fbc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000fc4:	fa91 f1a1 	rbit	r1, r1
 8000fc8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000fcc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000fd0:	fab1 f181 	clz	r1, r1
 8000fd4:	b2c9      	uxtb	r1, r1
 8000fd6:	408b      	lsls	r3, r1
 8000fd8:	4995      	ldr	r1, [pc, #596]	; (8001230 <HAL_RCC_OscConfig+0x650>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fde:	e0f5      	b.n	80011cc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8085 	beq.w	80010f6 <HAL_RCC_OscConfig+0x516>
 8000fec:	2301      	movs	r3, #1
 8000fee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000ff6:	fa93 f3a3 	rbit	r3, r3
 8000ffa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000ffe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001002:	fab3 f383 	clz	r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800100c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	461a      	mov	r2, r3
 8001014:	2301      	movs	r3, #1
 8001016:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fb66 	bl	80006e8 <HAL_GetTick>
 800101c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001020:	e00a      	b.n	8001038 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001022:	f7ff fb61 	bl	80006e8 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d902      	bls.n	8001038 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	f000 bcd5 	b.w	80019e2 <HAL_RCC_OscConfig+0xe02>
 8001038:	2302      	movs	r3, #2
 800103a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001042:	fa93 f3a3 	rbit	r3, r3
 8001046:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800104a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104e:	fab3 f383 	clz	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	095b      	lsrs	r3, r3, #5
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <HAL_RCC_OscConfig+0x488>
 8001062:	4b73      	ldr	r3, [pc, #460]	; (8001230 <HAL_RCC_OscConfig+0x650>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	e013      	b.n	8001090 <HAL_RCC_OscConfig+0x4b0>
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001072:	fa93 f3a3 	rbit	r3, r3
 8001076:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800107a:	2302      	movs	r3, #2
 800107c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001080:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001084:	fa93 f3a3 	rbit	r3, r3
 8001088:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800108c:	4b68      	ldr	r3, [pc, #416]	; (8001230 <HAL_RCC_OscConfig+0x650>)
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	2202      	movs	r2, #2
 8001092:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001096:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800109a:	fa92 f2a2 	rbit	r2, r2
 800109e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80010a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80010a6:	fab2 f282 	clz	r2, r2
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	f042 0220 	orr.w	r2, r2, #32
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	f002 021f 	and.w	r2, r2, #31
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f202 	lsl.w	r2, r1, r2
 80010bc:	4013      	ands	r3, r2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0af      	beq.n	8001022 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c2:	4b5b      	ldr	r3, [pc, #364]	; (8001230 <HAL_RCC_OscConfig+0x650>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	21f8      	movs	r1, #248	; 0xf8
 80010d2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010da:	fa91 f1a1 	rbit	r1, r1
 80010de:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80010e2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80010e6:	fab1 f181 	clz	r1, r1
 80010ea:	b2c9      	uxtb	r1, r1
 80010ec:	408b      	lsls	r3, r1
 80010ee:	4950      	ldr	r1, [pc, #320]	; (8001230 <HAL_RCC_OscConfig+0x650>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
 80010f4:	e06a      	b.n	80011cc <HAL_RCC_OscConfig+0x5ec>
 80010f6:	2301      	movs	r3, #1
 80010f8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001108:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800110c:	fab3 f383 	clz	r3, r3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001116:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	461a      	mov	r2, r3
 800111e:	2300      	movs	r3, #0
 8001120:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001122:	f7ff fae1 	bl	80006e8 <HAL_GetTick>
 8001126:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112a:	e00a      	b.n	8001142 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800112c:	f7ff fadc 	bl	80006e8 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d902      	bls.n	8001142 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	f000 bc50 	b.w	80019e2 <HAL_RCC_OscConfig+0xe02>
 8001142:	2302      	movs	r3, #2
 8001144:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001148:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800114c:	fa93 f3a3 	rbit	r3, r3
 8001150:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001158:	fab3 f383 	clz	r3, r3
 800115c:	b2db      	uxtb	r3, r3
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b01      	cmp	r3, #1
 800116a:	d102      	bne.n	8001172 <HAL_RCC_OscConfig+0x592>
 800116c:	4b30      	ldr	r3, [pc, #192]	; (8001230 <HAL_RCC_OscConfig+0x650>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	e013      	b.n	800119a <HAL_RCC_OscConfig+0x5ba>
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800118a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <HAL_RCC_OscConfig+0x650>)
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	2202      	movs	r2, #2
 800119c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80011a0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011a4:	fa92 f2a2 	rbit	r2, r2
 80011a8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80011ac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80011b0:	fab2 f282 	clz	r2, r2
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	f042 0220 	orr.w	r2, r2, #32
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	f002 021f 	and.w	r2, r2, #31
 80011c0:	2101      	movs	r1, #1
 80011c2:	fa01 f202 	lsl.w	r2, r1, r2
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1af      	bne.n	800112c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80da 	beq.w	8001390 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d069      	beq.n	80012ba <HAL_RCC_OscConfig+0x6da>
 80011e6:	2301      	movs	r3, #1
 80011e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011f0:	fa93 f3a3 	rbit	r3, r3
 80011f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80011f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fc:	fab3 f383 	clz	r3, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	461a      	mov	r2, r3
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_RCC_OscConfig+0x654>)
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	461a      	mov	r2, r3
 800120c:	2301      	movs	r3, #1
 800120e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001210:	f7ff fa6a 	bl	80006e8 <HAL_GetTick>
 8001214:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001218:	e00e      	b.n	8001238 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121a:	f7ff fa65 	bl	80006e8 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d906      	bls.n	8001238 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e3d9      	b.n	80019e2 <HAL_RCC_OscConfig+0xe02>
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	10908120 	.word	0x10908120
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800124a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800124e:	2202      	movs	r2, #2
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	fa93 f2a3 	rbit	r2, r3
 800125c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001266:	2202      	movs	r2, #2
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	fa93 f2a3 	rbit	r2, r3
 8001274:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001278:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	4ba5      	ldr	r3, [pc, #660]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 800127c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800127e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001282:	2102      	movs	r1, #2
 8001284:	6019      	str	r1, [r3, #0]
 8001286:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	fa93 f1a3 	rbit	r1, r3
 8001290:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001294:	6019      	str	r1, [r3, #0]
  return result;
 8001296:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	2101      	movs	r1, #1
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0b0      	beq.n	800121a <HAL_RCC_OscConfig+0x63a>
 80012b8:	e06a      	b.n	8001390 <HAL_RCC_OscConfig+0x7b0>
 80012ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	fa93 f2a3 	rbit	r2, r3
 80012cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012d0:	601a      	str	r2, [r3, #0]
  return result;
 80012d2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012d6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012d8:	fab3 f383 	clz	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	4b8c      	ldr	r3, [pc, #560]	; (8001514 <HAL_RCC_OscConfig+0x934>)
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	461a      	mov	r2, r3
 80012e8:	2300      	movs	r3, #0
 80012ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff f9fc 	bl	80006e8 <HAL_GetTick>
 80012f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	e009      	b.n	800130a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f6:	f7ff f9f7 	bl	80006e8 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e36b      	b.n	80019e2 <HAL_RCC_OscConfig+0xe02>
 800130a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800130e:	2202      	movs	r2, #2
 8001310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	fa93 f2a3 	rbit	r2, r3
 800131c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001326:	2202      	movs	r2, #2
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	fa93 f2a3 	rbit	r2, r3
 8001334:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800133e:	2202      	movs	r2, #2
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	fa93 f2a3 	rbit	r2, r3
 800134c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001350:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001352:	4b6f      	ldr	r3, [pc, #444]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 8001354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001356:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800135a:	2102      	movs	r1, #2
 800135c:	6019      	str	r1, [r3, #0]
 800135e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	fa93 f1a3 	rbit	r1, r3
 8001368:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800136c:	6019      	str	r1, [r3, #0]
  return result;
 800136e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	fab3 f383 	clz	r3, r3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800137e:	b2db      	uxtb	r3, r3
 8001380:	f003 031f 	and.w	r3, r3, #31
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	4013      	ands	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1b2      	bne.n	80012f6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8158 	beq.w	8001650 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a6:	4b5a      	ldr	r3, [pc, #360]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d112      	bne.n	80013d8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b57      	ldr	r3, [pc, #348]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a56      	ldr	r2, [pc, #344]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b54      	ldr	r3, [pc, #336]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013d2:	2301      	movs	r3, #1
 80013d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	4b4f      	ldr	r3, [pc, #316]	; (8001518 <HAL_RCC_OscConfig+0x938>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d11a      	bne.n	800141a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e4:	4b4c      	ldr	r3, [pc, #304]	; (8001518 <HAL_RCC_OscConfig+0x938>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a4b      	ldr	r2, [pc, #300]	; (8001518 <HAL_RCC_OscConfig+0x938>)
 80013ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f0:	f7ff f97a 	bl	80006e8 <HAL_GetTick>
 80013f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	e009      	b.n	800140e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fa:	f7ff f975 	bl	80006e8 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e2e9      	b.n	80019e2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140e:	4b42      	ldr	r3, [pc, #264]	; (8001518 <HAL_RCC_OscConfig+0x938>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0ef      	beq.n	80013fa <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d106      	bne.n	8001432 <HAL_RCC_OscConfig+0x852>
 8001424:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	4a39      	ldr	r2, [pc, #228]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6213      	str	r3, [r2, #32]
 8001430:	e02f      	b.n	8001492 <HAL_RCC_OscConfig+0x8b2>
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10c      	bne.n	8001456 <HAL_RCC_OscConfig+0x876>
 800143c:	4b34      	ldr	r3, [pc, #208]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4a33      	ldr	r2, [pc, #204]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 8001442:	f023 0301 	bic.w	r3, r3, #1
 8001446:	6213      	str	r3, [r2, #32]
 8001448:	4b31      	ldr	r3, [pc, #196]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4a30      	ldr	r2, [pc, #192]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 800144e:	f023 0304 	bic.w	r3, r3, #4
 8001452:	6213      	str	r3, [r2, #32]
 8001454:	e01d      	b.n	8001492 <HAL_RCC_OscConfig+0x8b2>
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b05      	cmp	r3, #5
 800145e:	d10c      	bne.n	800147a <HAL_RCC_OscConfig+0x89a>
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a2a      	ldr	r2, [pc, #168]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 8001466:	f043 0304 	orr.w	r3, r3, #4
 800146a:	6213      	str	r3, [r2, #32]
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4a27      	ldr	r2, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6213      	str	r3, [r2, #32]
 8001478:	e00b      	b.n	8001492 <HAL_RCC_OscConfig+0x8b2>
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a24      	ldr	r2, [pc, #144]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a21      	ldr	r2, [pc, #132]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d06b      	beq.n	8001574 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149c:	f7ff f924 	bl	80006e8 <HAL_GetTick>
 80014a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a4:	e00b      	b.n	80014be <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff f91f 	bl	80006e8 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e291      	b.n	80019e2 <HAL_RCC_OscConfig+0xe02>
 80014be:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014c2:	2202      	movs	r2, #2
 80014c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	fa93 f2a3 	rbit	r2, r3
 80014d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014da:	2202      	movs	r2, #2
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	fa93 f2a3 	rbit	r2, r3
 80014e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014ec:	601a      	str	r2, [r3, #0]
  return result;
 80014ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	fab3 f383 	clz	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d109      	bne.n	800151c <HAL_RCC_OscConfig+0x93c>
 8001508:	4b01      	ldr	r3, [pc, #4]	; (8001510 <HAL_RCC_OscConfig+0x930>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	e014      	b.n	8001538 <HAL_RCC_OscConfig+0x958>
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	10908120 	.word	0x10908120
 8001518:	40007000 	.word	0x40007000
 800151c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001520:	2202      	movs	r2, #2
 8001522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	fa93 f2a3 	rbit	r2, r3
 800152e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	4bbb      	ldr	r3, [pc, #748]	; (8001824 <HAL_RCC_OscConfig+0xc44>)
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800153c:	2102      	movs	r1, #2
 800153e:	6011      	str	r1, [r2, #0]
 8001540:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	fa92 f1a2 	rbit	r1, r2
 800154a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800154e:	6011      	str	r1, [r2, #0]
  return result;
 8001550:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	fab2 f282 	clz	r2, r2
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	f002 021f 	and.w	r2, r2, #31
 8001566:	2101      	movs	r1, #1
 8001568:	fa01 f202 	lsl.w	r2, r1, r2
 800156c:	4013      	ands	r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d099      	beq.n	80014a6 <HAL_RCC_OscConfig+0x8c6>
 8001572:	e063      	b.n	800163c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff f8b8 	bl	80006e8 <HAL_GetTick>
 8001578:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157c:	e00b      	b.n	8001596 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff f8b3 	bl	80006e8 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	; 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e225      	b.n	80019e2 <HAL_RCC_OscConfig+0xe02>
 8001596:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800159a:	2202      	movs	r2, #2
 800159c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fa93 f2a3 	rbit	r2, r3
 80015a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015b2:	2202      	movs	r2, #2
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015c4:	601a      	str	r2, [r3, #0]
  return result;
 80015c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	f043 0302 	orr.w	r3, r3, #2
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d102      	bne.n	80015e6 <HAL_RCC_OscConfig+0xa06>
 80015e0:	4b90      	ldr	r3, [pc, #576]	; (8001824 <HAL_RCC_OscConfig+0xc44>)
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	e00d      	b.n	8001602 <HAL_RCC_OscConfig+0xa22>
 80015e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015ea:	2202      	movs	r2, #2
 80015ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	fa93 f2a3 	rbit	r2, r3
 80015f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	4b89      	ldr	r3, [pc, #548]	; (8001824 <HAL_RCC_OscConfig+0xc44>)
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001606:	2102      	movs	r1, #2
 8001608:	6011      	str	r1, [r2, #0]
 800160a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	fa92 f1a2 	rbit	r1, r2
 8001614:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001618:	6011      	str	r1, [r2, #0]
  return result;
 800161a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	fab2 f282 	clz	r2, r2
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	f002 021f 	and.w	r2, r2, #31
 8001630:	2101      	movs	r1, #1
 8001632:	fa01 f202 	lsl.w	r2, r1, r2
 8001636:	4013      	ands	r3, r2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1a0      	bne.n	800157e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800163c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001644:	4b77      	ldr	r3, [pc, #476]	; (8001824 <HAL_RCC_OscConfig+0xc44>)
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	4a76      	ldr	r2, [pc, #472]	; (8001824 <HAL_RCC_OscConfig+0xc44>)
 800164a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 81c2 	beq.w	80019e0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800165c:	4b71      	ldr	r3, [pc, #452]	; (8001824 <HAL_RCC_OscConfig+0xc44>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	f000 819c 	beq.w	80019a2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	2b02      	cmp	r3, #2
 8001672:	f040 8114 	bne.w	800189e <HAL_RCC_OscConfig+0xcbe>
 8001676:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800167a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800167e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	fa93 f2a3 	rbit	r2, r3
 800168a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800168e:	601a      	str	r2, [r3, #0]
  return result;
 8001690:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001694:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001696:	fab3 f383 	clz	r3, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	461a      	mov	r2, r3
 80016a8:	2300      	movs	r3, #0
 80016aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff f81c 	bl	80006e8 <HAL_GetTick>
 80016b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b4:	e009      	b.n	80016ca <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff f817 	bl	80006e8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e18b      	b.n	80019e2 <HAL_RCC_OscConfig+0xe02>
 80016ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	fa93 f2a3 	rbit	r2, r3
 80016de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016e2:	601a      	str	r2, [r3, #0]
  return result;
 80016e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	095b      	lsrs	r3, r3, #5
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d102      	bne.n	8001704 <HAL_RCC_OscConfig+0xb24>
 80016fe:	4b49      	ldr	r3, [pc, #292]	; (8001824 <HAL_RCC_OscConfig+0xc44>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	e01b      	b.n	800173c <HAL_RCC_OscConfig+0xb5c>
 8001704:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001708:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800170c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	fa93 f2a3 	rbit	r2, r3
 8001718:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001722:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f2a3 	rbit	r2, r3
 8001732:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <HAL_RCC_OscConfig+0xc44>)
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001740:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001744:	6011      	str	r1, [r2, #0]
 8001746:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	fa92 f1a2 	rbit	r1, r2
 8001750:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001754:	6011      	str	r1, [r2, #0]
  return result;
 8001756:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	fab2 f282 	clz	r2, r2
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	f042 0220 	orr.w	r2, r2, #32
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	f002 021f 	and.w	r2, r2, #31
 800176c:	2101      	movs	r1, #1
 800176e:	fa01 f202 	lsl.w	r2, r1, r2
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d19e      	bne.n	80016b6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001778:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_RCC_OscConfig+0xc44>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	430b      	orrs	r3, r1
 800178e:	4925      	ldr	r1, [pc, #148]	; (8001824 <HAL_RCC_OscConfig+0xc44>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
 8001794:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001798:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800179c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	fa93 f2a3 	rbit	r2, r3
 80017a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017ac:	601a      	str	r2, [r3, #0]
  return result;
 80017ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017b2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	461a      	mov	r2, r3
 80017c6:	2301      	movs	r3, #1
 80017c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7fe ff8d 	bl	80006e8 <HAL_GetTick>
 80017ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d2:	e009      	b.n	80017e8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d4:	f7fe ff88 	bl	80006e8 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0fc      	b.n	80019e2 <HAL_RCC_OscConfig+0xe02>
 80017e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	fa93 f2a3 	rbit	r2, r3
 80017fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001800:	601a      	str	r2, [r3, #0]
  return result;
 8001802:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001806:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_RCC_OscConfig+0xc48>
 800181c:	4b01      	ldr	r3, [pc, #4]	; (8001824 <HAL_RCC_OscConfig+0xc44>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	e01e      	b.n	8001860 <HAL_RCC_OscConfig+0xc80>
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800182c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	fa93 f2a3 	rbit	r2, r3
 800183c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001846:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	fa93 f2a3 	rbit	r2, r3
 8001856:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	4b63      	ldr	r3, [pc, #396]	; (80019ec <HAL_RCC_OscConfig+0xe0c>)
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001864:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001868:	6011      	str	r1, [r2, #0]
 800186a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	fa92 f1a2 	rbit	r1, r2
 8001874:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001878:	6011      	str	r1, [r2, #0]
  return result;
 800187a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	fab2 f282 	clz	r2, r2
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	f042 0220 	orr.w	r2, r2, #32
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	f002 021f 	and.w	r2, r2, #31
 8001890:	2101      	movs	r1, #1
 8001892:	fa01 f202 	lsl.w	r2, r1, r2
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d09b      	beq.n	80017d4 <HAL_RCC_OscConfig+0xbf4>
 800189c:	e0a0      	b.n	80019e0 <HAL_RCC_OscConfig+0xe00>
 800189e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	fa93 f2a3 	rbit	r2, r3
 80018b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b6:	601a      	str	r2, [r3, #0]
  return result;
 80018b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	461a      	mov	r2, r3
 80018d0:	2300      	movs	r3, #0
 80018d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7fe ff08 	bl	80006e8 <HAL_GetTick>
 80018d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018dc:	e009      	b.n	80018f2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018de:	f7fe ff03 	bl	80006e8 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e077      	b.n	80019e2 <HAL_RCC_OscConfig+0xe02>
 80018f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	fa93 f2a3 	rbit	r2, r3
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	601a      	str	r2, [r3, #0]
  return result;
 800190c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001910:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001912:	fab3 f383 	clz	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	095b      	lsrs	r3, r3, #5
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b01      	cmp	r3, #1
 8001924:	d102      	bne.n	800192c <HAL_RCC_OscConfig+0xd4c>
 8001926:	4b31      	ldr	r3, [pc, #196]	; (80019ec <HAL_RCC_OscConfig+0xe0c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	e01b      	b.n	8001964 <HAL_RCC_OscConfig+0xd84>
 800192c:	f107 0320 	add.w	r3, r7, #32
 8001930:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f107 0320 	add.w	r3, r7, #32
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	f107 0318 	add.w	r3, r7, #24
 800194a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	fa93 f2a3 	rbit	r2, r3
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <HAL_RCC_OscConfig+0xe0c>)
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	f107 0210 	add.w	r2, r7, #16
 8001968:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800196c:	6011      	str	r1, [r2, #0]
 800196e:	f107 0210 	add.w	r2, r7, #16
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	fa92 f1a2 	rbit	r1, r2
 8001978:	f107 020c 	add.w	r2, r7, #12
 800197c:	6011      	str	r1, [r2, #0]
  return result;
 800197e:	f107 020c 	add.w	r2, r7, #12
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	fab2 f282 	clz	r2, r2
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f042 0220 	orr.w	r2, r2, #32
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	f002 021f 	and.w	r2, r2, #31
 8001994:	2101      	movs	r1, #1
 8001996:	fa01 f202 	lsl.w	r2, r1, r2
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d19e      	bne.n	80018de <HAL_RCC_OscConfig+0xcfe>
 80019a0:	e01e      	b.n	80019e0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e018      	b.n	80019e2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_RCC_OscConfig+0xe0c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019b8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d108      	bne.n	80019dc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80019ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b09e      	sub	sp, #120	; 0x78
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e162      	b.n	8001cce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b90      	ldr	r3, [pc, #576]	; (8001c4c <HAL_RCC_ClockConfig+0x25c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d910      	bls.n	8001a38 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b8d      	ldr	r3, [pc, #564]	; (8001c4c <HAL_RCC_ClockConfig+0x25c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 0207 	bic.w	r2, r3, #7
 8001a1e:	498b      	ldr	r1, [pc, #556]	; (8001c4c <HAL_RCC_ClockConfig+0x25c>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b89      	ldr	r3, [pc, #548]	; (8001c4c <HAL_RCC_ClockConfig+0x25c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e14a      	b.n	8001cce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d008      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b82      	ldr	r3, [pc, #520]	; (8001c50 <HAL_RCC_ClockConfig+0x260>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	497f      	ldr	r1, [pc, #508]	; (8001c50 <HAL_RCC_ClockConfig+0x260>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80dc 	beq.w	8001c1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d13c      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xf6>
 8001a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d102      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xa6>
 8001a90:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_RCC_ClockConfig+0x260>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	e00f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0xc6>
 8001a96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a9e:	fa93 f3a3 	rbit	r3, r3
 8001aa2:	667b      	str	r3, [r7, #100]	; 0x64
 8001aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa8:	663b      	str	r3, [r7, #96]	; 0x60
 8001aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ab2:	4b67      	ldr	r3, [pc, #412]	; (8001c50 <HAL_RCC_ClockConfig+0x260>)
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aba:	65ba      	str	r2, [r7, #88]	; 0x58
 8001abc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001abe:	fa92 f2a2 	rbit	r2, r2
 8001ac2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ac4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ac6:	fab2 f282 	clz	r2, r2
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	f042 0220 	orr.w	r2, r2, #32
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	f002 021f 	and.w	r2, r2, #31
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d17b      	bne.n	8001bda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e0f3      	b.n	8001cce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d13c      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x178>
 8001aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001af2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	095b      	lsrs	r3, r3, #5
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d102      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x128>
 8001b12:	4b4f      	ldr	r3, [pc, #316]	; (8001c50 <HAL_RCC_ClockConfig+0x260>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	e00f      	b.n	8001b38 <HAL_RCC_ClockConfig+0x148>
 8001b18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	647b      	str	r3, [r7, #68]	; 0x44
 8001b26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b2a:	643b      	str	r3, [r7, #64]	; 0x40
 8001b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b34:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <HAL_RCC_ClockConfig+0x260>)
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b40:	fa92 f2a2 	rbit	r2, r2
 8001b44:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b48:	fab2 f282 	clz	r2, r2
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	f042 0220 	orr.w	r2, r2, #32
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	f002 021f 	and.w	r2, r2, #31
 8001b58:	2101      	movs	r1, #1
 8001b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d13a      	bne.n	8001bda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0b2      	b.n	8001cce <HAL_RCC_ClockConfig+0x2de>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	095b      	lsrs	r3, r3, #5
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d102      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x1a0>
 8001b8a:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <HAL_RCC_ClockConfig+0x260>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	e00d      	b.n	8001bac <HAL_RCC_ClockConfig+0x1bc>
 8001b90:	2302      	movs	r3, #2
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	623b      	str	r3, [r7, #32]
 8001ba0:	6a3b      	ldr	r3, [r7, #32]
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <HAL_RCC_ClockConfig+0x260>)
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	2202      	movs	r2, #2
 8001bae:	61ba      	str	r2, [r7, #24]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	fa92 f2a2 	rbit	r2, r2
 8001bb6:	617a      	str	r2, [r7, #20]
  return result;
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	fab2 f282 	clz	r2, r2
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	f042 0220 	orr.w	r2, r2, #32
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	f002 021f 	and.w	r2, r2, #31
 8001bca:	2101      	movs	r1, #1
 8001bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e079      	b.n	8001cce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_RCC_ClockConfig+0x260>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	491a      	ldr	r1, [pc, #104]	; (8001c50 <HAL_RCC_ClockConfig+0x260>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bec:	f7fe fd7c 	bl	80006e8 <HAL_GetTick>
 8001bf0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7fe fd78 	bl	80006e8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e061      	b.n	8001cce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_RCC_ClockConfig+0x260>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 020c 	and.w	r2, r3, #12
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_ClockConfig+0x25c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d214      	bcs.n	8001c54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_RCC_ClockConfig+0x25c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 0207 	bic.w	r2, r3, #7
 8001c32:	4906      	ldr	r1, [pc, #24]	; (8001c4c <HAL_RCC_ClockConfig+0x25c>)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <HAL_RCC_ClockConfig+0x25c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e040      	b.n	8001cce <HAL_RCC_ClockConfig+0x2de>
 8001c4c:	40022000 	.word	0x40022000
 8001c50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	491a      	ldr	r1, [pc, #104]	; (8001cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4912      	ldr	r1, [pc, #72]	; (8001cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c92:	f000 f829 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001c96:	4601      	mov	r1, r0
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca0:	22f0      	movs	r2, #240	; 0xf0
 8001ca2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	fa92 f2a2 	rbit	r2, r2
 8001caa:	60fa      	str	r2, [r7, #12]
  return result;
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	fab2 f282 	clz	r2, r2
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	40d3      	lsrs	r3, r2
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x2ec>)
 8001cb8:	5cd3      	ldrb	r3, [r2, r3]
 8001cba:	fa21 f303 	lsr.w	r3, r1, r3
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_RCC_ClockConfig+0x2f0>)
 8001cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_RCC_ClockConfig+0x2f4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fcca 	bl	8000660 <HAL_InitTick>
  
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3778      	adds	r7, #120	; 0x78
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	0800272c 	.word	0x0800272c
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b08b      	sub	sp, #44	; 0x2c
 8001cec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d002      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x30>
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d003      	beq.n	8001d1e <HAL_RCC_GetSysClockFreq+0x36>
 8001d16:	e03c      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d18:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d1a:	623b      	str	r3, [r7, #32]
      break;
 8001d1c:	e03c      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d24:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d28:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	fa92 f2a2 	rbit	r2, r2
 8001d30:	607a      	str	r2, [r7, #4]
  return result;
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	fab2 f282 	clz	r2, r2
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	40d3      	lsrs	r3, r2
 8001d3c:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d3e:	5cd3      	ldrb	r3, [r2, r3]
 8001d40:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	fa92 f2a2 	rbit	r2, r2
 8001d54:	60fa      	str	r2, [r7, #12]
  return result;
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	fab2 f282 	clz	r2, r2
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	40d3      	lsrs	r3, r2
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d70:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	e004      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	623b      	str	r3, [r7, #32]
      break;
 8001d90:	e002      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d94:	623b      	str	r3, [r7, #32]
      break;
 8001d96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d98:	6a3b      	ldr	r3, [r7, #32]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	372c      	adds	r7, #44	; 0x2c
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	007a1200 	.word	0x007a1200
 8001db0:	0800273c 	.word	0x0800273c
 8001db4:	0800274c 	.word	0x0800274c
 8001db8:	003d0900 	.word	0x003d0900

08001dbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e09d      	b.n	8001f0a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dde:	d009      	beq.n	8001df4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
 8001de6:	e005      	b.n	8001df4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe fb42 	bl	8000498 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e34:	d902      	bls.n	8001e3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	e002      	b.n	8001e42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001e4a:	d007      	beq.n	8001e5c <HAL_SPI_Init+0xa0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e54:	d002      	beq.n	8001e5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	ea42 0103 	orr.w	r1, r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	0c1b      	lsrs	r3, r3, #16
 8001eb8:	f003 0204 	and.w	r2, r3, #4
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ed8:	ea42 0103 	orr.w	r1, r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69da      	ldr	r2, [r3, #28]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ef8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b088      	sub	sp, #32
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_SPI_Transmit+0x22>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e158      	b.n	80021e6 <HAL_SPI_Transmit+0x2d4>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f3c:	f7fe fbd4 	bl	80006e8 <HAL_GetTick>
 8001f40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d002      	beq.n	8001f58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
 8001f54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f56:	e13d      	b.n	80021d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_SPI_Transmit+0x52>
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f68:	e134      	b.n	80021d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	88fa      	ldrh	r2, [r7, #6]
 8001f88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe0:	2b40      	cmp	r3, #64	; 0x40
 8001fe2:	d007      	beq.n	8001ff4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ffc:	d94b      	bls.n	8002096 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_SPI_Transmit+0xfa>
 8002006:	8afb      	ldrh	r3, [r7, #22]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d13e      	bne.n	800208a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	881a      	ldrh	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	1c9a      	adds	r2, r3, #2
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002026:	b29b      	uxth	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002030:	e02b      	b.n	800208a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b02      	cmp	r3, #2
 800203e:	d112      	bne.n	8002066 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	881a      	ldrh	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002050:	1c9a      	adds	r2, r3, #2
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002064:	e011      	b.n	800208a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002066:	f7fe fb3f 	bl	80006e8 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d803      	bhi.n	800207e <HAL_SPI_Transmit+0x16c>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d102      	bne.n	8002084 <HAL_SPI_Transmit+0x172>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002088:	e0a4      	b.n	80021d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1ce      	bne.n	8002032 <HAL_SPI_Transmit+0x120>
 8002094:	e07c      	b.n	8002190 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_SPI_Transmit+0x192>
 800209e:	8afb      	ldrh	r3, [r7, #22]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d170      	bne.n	8002186 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d912      	bls.n	80020d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	881a      	ldrh	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	1c9a      	adds	r2, r3, #2
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b02      	subs	r3, #2
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020d2:	e058      	b.n	8002186 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	330c      	adds	r3, #12
 80020de:	7812      	ldrb	r2, [r2, #0]
 80020e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80020fa:	e044      	b.n	8002186 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b02      	cmp	r3, #2
 8002108:	d12b      	bne.n	8002162 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	d912      	bls.n	800213a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002118:	881a      	ldrh	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	1c9a      	adds	r2, r3, #2
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800212e:	b29b      	uxth	r3, r3
 8002130:	3b02      	subs	r3, #2
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002138:	e025      	b.n	8002186 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	330c      	adds	r3, #12
 8002144:	7812      	ldrb	r2, [r2, #0]
 8002146:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002160:	e011      	b.n	8002186 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002162:	f7fe fac1 	bl	80006e8 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d803      	bhi.n	800217a <HAL_SPI_Transmit+0x268>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d102      	bne.n	8002180 <HAL_SPI_Transmit+0x26e>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002184:	e026      	b.n	80021d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1b5      	bne.n	80020fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	6839      	ldr	r1, [r7, #0]
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f941 	bl	800241c <SPI_EndRxTxTransaction>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2220      	movs	r2, #32
 80021a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10a      	bne.n	80021c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	77fb      	strb	r3, [r7, #31]
 80021d0:	e000      	b.n	80021d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80021d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80021e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	4613      	mov	r3, r2
 80021fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002200:	f7fe fa72 	bl	80006e8 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	4413      	add	r3, r2
 800220e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002210:	f7fe fa6a 	bl	80006e8 <HAL_GetTick>
 8002214:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002216:	4b39      	ldr	r3, [pc, #228]	; (80022fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	015b      	lsls	r3, r3, #5
 800221c:	0d1b      	lsrs	r3, r3, #20
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002226:	e054      	b.n	80022d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222e:	d050      	beq.n	80022d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002230:	f7fe fa5a 	bl	80006e8 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	429a      	cmp	r2, r3
 800223e:	d902      	bls.n	8002246 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d13d      	bne.n	80022c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002254:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800225e:	d111      	bne.n	8002284 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002268:	d004      	beq.n	8002274 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002272:	d107      	bne.n	8002284 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002282:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800228c:	d10f      	bne.n	80022ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e017      	b.n	80022f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4013      	ands	r3, r2
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	429a      	cmp	r2, r3
 80022e0:	bf0c      	ite	eq
 80022e2:	2301      	moveq	r3, #1
 80022e4:	2300      	movne	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d19b      	bne.n	8002228 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000000 	.word	0x20000000

08002300 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800230e:	f7fe f9eb 	bl	80006e8 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	4413      	add	r3, r2
 800231c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800231e:	f7fe f9e3 	bl	80006e8 <HAL_GetTick>
 8002322:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002324:	4b3c      	ldr	r3, [pc, #240]	; (8002418 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00da      	lsls	r2, r3, #3
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	0d1b      	lsrs	r3, r3, #20
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800233c:	e05f      	b.n	80023fe <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002344:	d106      	bne.n	8002354 <SPI_WaitFifoStateUntilTimeout+0x54>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d103      	bne.n	8002354 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	330c      	adds	r3, #12
 8002352:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235a:	d050      	beq.n	80023fe <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800235c:	f7fe f9c4 	bl	80006e8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	429a      	cmp	r2, r3
 800236a:	d902      	bls.n	8002372 <SPI_WaitFifoStateUntilTimeout+0x72>
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d13d      	bne.n	80023ee <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002380:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800238a:	d111      	bne.n	80023b0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002394:	d004      	beq.n	80023a0 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239e:	d107      	bne.n	80023b0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b8:	d10f      	bne.n	80023da <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e010      	b.n	8002410 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4013      	ands	r3, r2
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	429a      	cmp	r2, r3
 800240c:	d197      	bne.n	800233e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000000 	.word	0x20000000

0800241c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2200      	movs	r2, #0
 8002430:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff ff63 	bl	8002300 <SPI_WaitFifoStateUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e027      	b.n	80024a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2200      	movs	r2, #0
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f7ff fec8 	bl	80021f0 <SPI_WaitFlagStateUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246a:	f043 0220 	orr.w	r2, r3, #32
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e014      	b.n	80024a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2200      	movs	r2, #0
 800247e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f7ff ff3c 	bl	8002300 <SPI_WaitFifoStateUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002492:	f043 0220 	orr.w	r2, r3, #32
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e000      	b.n	80024a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <__libc_init_array>:
 80024a8:	b570      	push	{r4, r5, r6, lr}
 80024aa:	4d0d      	ldr	r5, [pc, #52]	; (80024e0 <__libc_init_array+0x38>)
 80024ac:	4c0d      	ldr	r4, [pc, #52]	; (80024e4 <__libc_init_array+0x3c>)
 80024ae:	1b64      	subs	r4, r4, r5
 80024b0:	10a4      	asrs	r4, r4, #2
 80024b2:	2600      	movs	r6, #0
 80024b4:	42a6      	cmp	r6, r4
 80024b6:	d109      	bne.n	80024cc <__libc_init_array+0x24>
 80024b8:	4d0b      	ldr	r5, [pc, #44]	; (80024e8 <__libc_init_array+0x40>)
 80024ba:	4c0c      	ldr	r4, [pc, #48]	; (80024ec <__libc_init_array+0x44>)
 80024bc:	f000 f82e 	bl	800251c <_init>
 80024c0:	1b64      	subs	r4, r4, r5
 80024c2:	10a4      	asrs	r4, r4, #2
 80024c4:	2600      	movs	r6, #0
 80024c6:	42a6      	cmp	r6, r4
 80024c8:	d105      	bne.n	80024d6 <__libc_init_array+0x2e>
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
 80024cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80024d0:	4798      	blx	r3
 80024d2:	3601      	adds	r6, #1
 80024d4:	e7ee      	b.n	80024b4 <__libc_init_array+0xc>
 80024d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024da:	4798      	blx	r3
 80024dc:	3601      	adds	r6, #1
 80024de:	e7f2      	b.n	80024c6 <__libc_init_array+0x1e>
 80024e0:	0800275c 	.word	0x0800275c
 80024e4:	0800275c 	.word	0x0800275c
 80024e8:	0800275c 	.word	0x0800275c
 80024ec:	08002760 	.word	0x08002760

080024f0 <memcpy>:
 80024f0:	440a      	add	r2, r1
 80024f2:	4291      	cmp	r1, r2
 80024f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80024f8:	d100      	bne.n	80024fc <memcpy+0xc>
 80024fa:	4770      	bx	lr
 80024fc:	b510      	push	{r4, lr}
 80024fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002506:	4291      	cmp	r1, r2
 8002508:	d1f9      	bne.n	80024fe <memcpy+0xe>
 800250a:	bd10      	pop	{r4, pc}

0800250c <memset>:
 800250c:	4402      	add	r2, r0
 800250e:	4603      	mov	r3, r0
 8002510:	4293      	cmp	r3, r2
 8002512:	d100      	bne.n	8002516 <memset+0xa>
 8002514:	4770      	bx	lr
 8002516:	f803 1b01 	strb.w	r1, [r3], #1
 800251a:	e7f9      	b.n	8002510 <memset+0x4>

0800251c <_init>:
 800251c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251e:	bf00      	nop
 8002520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002522:	bc08      	pop	{r3}
 8002524:	469e      	mov	lr, r3
 8002526:	4770      	bx	lr

08002528 <_fini>:
 8002528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252a:	bf00      	nop
 800252c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252e:	bc08      	pop	{r3}
 8002530:	469e      	mov	lr, r3
 8002532:	4770      	bx	lr
