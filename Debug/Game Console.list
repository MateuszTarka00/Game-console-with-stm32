
Game Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002370  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002720  08002720  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002720  08002720  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002720  08002720  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002720  08002720  00012720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002724  08002724  00012724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002734  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002734  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ac1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016b1  00000000  00000000  00027afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  000291b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000578  00000000  00000000  000297f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9aa  00000000  00000000  00029d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000857b  00000000  00000000  00044712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098eb8  00000000  00000000  0004cc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5b45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001720  00000000  00000000  000e5b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024e0 	.word	0x080024e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080024e0 	.word	0x080024e0

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001de:	4b24      	ldr	r3, [pc, #144]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a23      	ldr	r2, [pc, #140]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001e8:	6153      	str	r3, [r2, #20]
 80001ea:	4b21      	ldr	r3, [pc, #132]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001f6:	4b1e      	ldr	r3, [pc, #120]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	4a1d      	ldr	r2, [pc, #116]	; (8000270 <MX_GPIO_Init+0xa8>)
 80001fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000200:	6153      	str	r3, [r2, #20]
 8000202:	4b1b      	ldr	r3, [pc, #108]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	4b18      	ldr	r3, [pc, #96]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a17      	ldr	r2, [pc, #92]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000218:	6153      	str	r3, [r2, #20]
 800021a:	4b15      	ldr	r3, [pc, #84]	; (8000270 <MX_GPIO_Init+0xa8>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a11      	ldr	r2, [pc, #68]	; (8000270 <MX_GPIO_Init+0xa8>)
 800022c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000230:	6153      	str	r3, [r2, #20]
 8000232:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <MX_GPIO_Init+0xa8>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|CE_Pin|RESET_Pin, GPIO_PIN_SET);
 800023e:	2201      	movs	r2, #1
 8000240:	2170      	movs	r1, #112	; 0x70
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f000 fca3 	bl	8000b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DC_Pin|CE_Pin|RESET_Pin;
 800024a:	2370      	movs	r3, #112	; 0x70
 800024c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024e:	2301      	movs	r3, #1
 8000250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000252:	2300      	movs	r3, #0
 8000254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000256:	2300      	movs	r3, #0
 8000258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800025a:	f107 0314 	add.w	r3, r7, #20
 800025e:	4619      	mov	r1, r3
 8000260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000264:	f000 fb22 	bl	80008ac <HAL_GPIO_Init>

}
 8000268:	bf00      	nop
 800026a:	3728      	adds	r7, #40	; 0x28
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40021000 	.word	0x40021000

08000274 <lcd_reset>:
#include "font.h"

static uint8_t lcd_buffer[LCD_BUFFER_SIZE];

void lcd_reset()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2140      	movs	r1, #64	; 0x40
 800027c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000280:	f000 fc86 	bl	8000b90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000284:	2201      	movs	r2, #1
 8000286:	2140      	movs	r1, #64	; 0x40
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f000 fc80 	bl	8000b90 <HAL_GPIO_WritePin>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}

08000294 <lcd_cmd>:

void lcd_cmd(uint8_t cmd)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, CE_Pin|DC_Pin, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2130      	movs	r1, #48	; 0x30
 80002a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a6:	f000 fc73 	bl	8000b90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80002aa:	1df9      	adds	r1, r7, #7
 80002ac:	f04f 33ff 	mov.w	r3, #4294967295
 80002b0:	2201      	movs	r2, #1
 80002b2:	4806      	ldr	r0, [pc, #24]	; (80002cc <lcd_cmd+0x38>)
 80002b4:	f001 fe1d 	bl	8001ef2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, CE_Pin|DC_Pin, GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	2130      	movs	r1, #48	; 0x30
 80002bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c0:	f000 fc66 	bl	8000b90 <HAL_GPIO_WritePin>
}
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000028 	.word	0x20000028

080002d0 <lcd_data>:

void lcd_data(uint8_t* data, int size)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2120      	movs	r1, #32
 80002de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e2:	f000 fc55 	bl	8000b90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	2110      	movs	r1, #16
 80002ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ee:	f000 fc4f 	bl	8000b90 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)data, size, HAL_MAX_DELAY);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	b29a      	uxth	r2, r3
 80002f6:	f04f 33ff 	mov.w	r3, #4294967295
 80002fa:	6879      	ldr	r1, [r7, #4]
 80002fc:	4806      	ldr	r0, [pc, #24]	; (8000318 <lcd_data+0x48>)
 80002fe:	f001 fdf8 	bl	8001ef2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 8000302:	2201      	movs	r2, #1
 8000304:	2120      	movs	r1, #32
 8000306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800030a:	f000 fc41 	bl	8000b90 <HAL_GPIO_WritePin>
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000028 	.word	0x20000028

0800031c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000320:	f000 f978 	bl	8000614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000324:	f000 f82a 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000328:	f7ff ff4e 	bl	80001c8 <MX_GPIO_Init>
  MX_SPI2_Init();
 800032c:	f000 f866 	bl	80003fc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	2120      	movs	r1, #32
 8000334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000338:	f000 fc2a 	bl	8000b90 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 800033c:	2201      	movs	r2, #1
 800033e:	2140      	movs	r1, #64	; 0x40
 8000340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000344:	f000 fc24 	bl	8000b90 <HAL_GPIO_WritePin>

  lcd_reset();
 8000348:	f7ff ff94 	bl	8000274 <lcd_reset>

  lcd_cmd(0x21);
 800034c:	2021      	movs	r0, #33	; 0x21
 800034e:	f7ff ffa1 	bl	8000294 <lcd_cmd>
  lcd_cmd(0x14);
 8000352:	2014      	movs	r0, #20
 8000354:	f7ff ff9e 	bl	8000294 <lcd_cmd>
  lcd_cmd(0x80 | 0x1f); //Ustawienie kontrastu
 8000358:	209f      	movs	r0, #159	; 0x9f
 800035a:	f7ff ff9b 	bl	8000294 <lcd_cmd>
  lcd_cmd(0x20);
 800035e:	2020      	movs	r0, #32
 8000360:	f7ff ff98 	bl	8000294 <lcd_cmd>
  lcd_cmd(0x0c);
 8000364:	200c      	movs	r0, #12
 8000366:	f7ff ff95 	bl	8000294 <lcd_cmd>

  lcd_data(game_icon, sizeof(game_icon));
 800036a:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800036e:	4802      	ldr	r0, [pc, #8]	; (8000378 <main+0x5c>)
 8000370:	f7ff ffae 	bl	80002d0 <lcd_data>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000374:	e7fe      	b.n	8000374 <main+0x58>
 8000376:	bf00      	nop
 8000378:	080024f8 	.word	0x080024f8

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b090      	sub	sp, #64	; 0x40
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 0318 	add.w	r3, r7, #24
 8000386:	2228      	movs	r2, #40	; 0x28
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f002 f8a0 	bl	80024d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]
 800039c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039e:	2302      	movs	r3, #2
 80003a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a2:	2301      	movs	r3, #1
 80003a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a6:	2310      	movs	r3, #16
 80003a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003aa:	2300      	movs	r3, #0
 80003ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0318 	add.w	r3, r7, #24
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fc04 	bl	8000bc0 <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003be:	f000 f818 	bl	80003f2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	230f      	movs	r3, #15
 80003c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 faf8 	bl	80019d0 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003e6:	f000 f804 	bl	80003f2 <Error_Handler>
  }
}
 80003ea:	bf00      	nop
 80003ec:	3740      	adds	r7, #64	; 0x40
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f6:	b672      	cpsid	i
}
 80003f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003fa:	e7fe      	b.n	80003fa <Error_Handler+0x8>

080003fc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_SPI2_Init+0x74>)
 8000402:	4a1c      	ldr	r2, [pc, #112]	; (8000474 <MX_SPI2_Init+0x78>)
 8000404:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000406:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <MX_SPI2_Init+0x74>)
 8000408:	f44f 7282 	mov.w	r2, #260	; 0x104
 800040c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800040e:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_SPI2_Init+0x74>)
 8000410:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000414:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000416:	4b16      	ldr	r3, [pc, #88]	; (8000470 <MX_SPI2_Init+0x74>)
 8000418:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800041c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800041e:	4b14      	ldr	r3, [pc, #80]	; (8000470 <MX_SPI2_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <MX_SPI2_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_SPI2_Init+0x74>)
 800042c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000430:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000432:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_SPI2_Init+0x74>)
 8000434:	2200      	movs	r2, #0
 8000436:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <MX_SPI2_Init+0x74>)
 800043a:	2200      	movs	r2, #0
 800043c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800043e:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_SPI2_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <MX_SPI2_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800044a:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_SPI2_Init+0x74>)
 800044c:	2207      	movs	r2, #7
 800044e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <MX_SPI2_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_SPI2_Init+0x74>)
 8000458:	2208      	movs	r2, #8
 800045a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800045c:	4804      	ldr	r0, [pc, #16]	; (8000470 <MX_SPI2_Init+0x74>)
 800045e:	f001 fc9d 	bl	8001d9c <HAL_SPI_Init>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000468:	f7ff ffc3 	bl	80003f2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000028 	.word	0x20000028
 8000474:	40003800 	.word	0x40003800

08000478 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	; 0x28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a17      	ldr	r2, [pc, #92]	; (80004f4 <HAL_SPI_MspInit+0x7c>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d128      	bne.n	80004ec <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800049a:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <HAL_SPI_MspInit+0x80>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a16      	ldr	r2, [pc, #88]	; (80004f8 <HAL_SPI_MspInit+0x80>)
 80004a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <HAL_SPI_MspInit+0x80>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b2:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <HAL_SPI_MspInit+0x80>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <HAL_SPI_MspInit+0x80>)
 80004b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <HAL_SPI_MspInit+0x80>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80004ca:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d0:	2302      	movs	r3, #2
 80004d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d8:	2303      	movs	r3, #3
 80004da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80004dc:	2305      	movs	r3, #5
 80004de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	4619      	mov	r1, r3
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <HAL_SPI_MspInit+0x84>)
 80004e8:	f000 f9e0 	bl	80008ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80004ec:	bf00      	nop
 80004ee:	3728      	adds	r7, #40	; 0x28
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40003800 	.word	0x40003800
 80004f8:	40021000 	.word	0x40021000
 80004fc:	48000400 	.word	0x48000400

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <HAL_MspInit+0x44>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <HAL_MspInit+0x44>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_MspInit+0x44>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <HAL_MspInit+0x44>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a08      	ldr	r2, [pc, #32]	; (8000544 <HAL_MspInit+0x44>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_MspInit+0x44>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800054c:	e7fe      	b.n	800054c <NMI_Handler+0x4>

0800054e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <HardFault_Handler+0x4>

08000554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <MemManage_Handler+0x4>

0800055a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <UsageFault_Handler+0x4>

08000566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000594:	f000 f884 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <SystemInit+0x20>)
 80005a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <SystemInit+0x20>)
 80005a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <LoopForever+0x6>)
  ldr r1, =_edata
 80005c6:	490e      	ldr	r1, [pc, #56]	; (8000600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c8:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <LoopForever+0xe>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005dc:	4c0b      	ldr	r4, [pc, #44]	; (800060c <LoopForever+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ea:	f7ff ffd7 	bl	800059c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f001 ff4b 	bl	8002488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005f2:	f7ff fe93 	bl	800031c <main>

080005f6 <LoopForever>:

LoopForever:
    b LoopForever
 80005f6:	e7fe      	b.n	80005f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005f8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000604:	08002728 	.word	0x08002728
  ldr r2, =_sbss
 8000608:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800060c:	20000090 	.word	0x20000090

08000610 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_IRQHandler>
	...

08000614 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_Init+0x28>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_Init+0x28>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f90d 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f808 	bl	8000640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000630:	f7ff ff66 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x54>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_InitTick+0x58>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f917 	bl	8000892 <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e00e      	b.n	800068c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d80a      	bhi.n	800068a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295
 800067c:	f000 f8ed 	bl	800085a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4a06      	ldr	r2, [pc, #24]	; (800069c <HAL_InitTick+0x5c>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	20000008 	.word	0x20000008
 800069c:	20000004 	.word	0x20000004

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_IncTick+0x20>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_IncTick+0x24>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <HAL_IncTick+0x24>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000008 	.word	0x20000008
 80006c4:	2000008c 	.word	0x2000008c

080006c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <HAL_GetTick+0x14>)
 80006ce:	681b      	ldr	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	2000008c 	.word	0x2000008c

080006e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006fc:	4013      	ands	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000712:	4a04      	ldr	r2, [pc, #16]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	60d3      	str	r3, [r2, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <__NVIC_GetPriorityGrouping+0x18>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	f003 0307 	and.w	r3, r3, #7
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	db0a      	blt.n	800076e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	490c      	ldr	r1, [pc, #48]	; (8000790 <__NVIC_SetPriority+0x4c>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	0112      	lsls	r2, r2, #4
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	440b      	add	r3, r1
 8000768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800076c:	e00a      	b.n	8000784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4908      	ldr	r1, [pc, #32]	; (8000794 <__NVIC_SetPriority+0x50>)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	f003 030f 	and.w	r3, r3, #15
 800077a:	3b04      	subs	r3, #4
 800077c:	0112      	lsls	r2, r2, #4
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	440b      	add	r3, r1
 8000782:	761a      	strb	r2, [r3, #24]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000e100 	.word	0xe000e100
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000798:	b480      	push	{r7}
 800079a:	b089      	sub	sp, #36	; 0x24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	f1c3 0307 	rsb	r3, r3, #7
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	bf28      	it	cs
 80007b6:	2304      	movcs	r3, #4
 80007b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3304      	adds	r3, #4
 80007be:	2b06      	cmp	r3, #6
 80007c0:	d902      	bls.n	80007c8 <NVIC_EncodePriority+0x30>
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3b03      	subs	r3, #3
 80007c6:	e000      	b.n	80007ca <NVIC_EncodePriority+0x32>
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007cc:	f04f 32ff 	mov.w	r2, #4294967295
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43da      	mvns	r2, r3
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	401a      	ands	r2, r3
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e0:	f04f 31ff 	mov.w	r1, #4294967295
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	43d9      	mvns	r1, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	4313      	orrs	r3, r2
         );
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3724      	adds	r7, #36	; 0x24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000810:	d301      	bcc.n	8000816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000812:	2301      	movs	r3, #1
 8000814:	e00f      	b.n	8000836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <SysTick_Config+0x40>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081e:	210f      	movs	r1, #15
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f7ff ff8e 	bl	8000744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <SysTick_Config+0x40>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <SysTick_Config+0x40>)
 8000830:	2207      	movs	r2, #7
 8000832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	e000e010 	.word	0xe000e010

08000844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff47 	bl	80006e0 <__NVIC_SetPriorityGrouping>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800086c:	f7ff ff5c 	bl	8000728 <__NVIC_GetPriorityGrouping>
 8000870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	6978      	ldr	r0, [r7, #20]
 8000878:	f7ff ff8e 	bl	8000798 <NVIC_EncodePriority>
 800087c:	4602      	mov	r2, r0
 800087e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff5d 	bl	8000744 <__NVIC_SetPriority>
}
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffb0 	bl	8000800 <SysTick_Config>
 80008a0:	4603      	mov	r3, r0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b087      	sub	sp, #28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ba:	e14e      	b.n	8000b5a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	2101      	movs	r1, #1
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	fa01 f303 	lsl.w	r3, r1, r3
 80008c8:	4013      	ands	r3, r2
 80008ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f000 8140 	beq.w	8000b54 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d00b      	beq.n	80008f4 <HAL_GPIO_Init+0x48>
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d007      	beq.n	80008f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e8:	2b11      	cmp	r3, #17
 80008ea:	d003      	beq.n	80008f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b12      	cmp	r3, #18
 80008f2:	d130      	bne.n	8000956 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	2203      	movs	r2, #3
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68da      	ldr	r2, [r3, #12]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4313      	orrs	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800092a:	2201      	movs	r2, #1
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	091b      	lsrs	r3, r3, #4
 8000940:	f003 0201 	and.w	r2, r3, #1
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4313      	orrs	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	2203      	movs	r2, #3
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	689a      	ldr	r2, [r3, #8]
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	2b02      	cmp	r3, #2
 800098c:	d003      	beq.n	8000996 <HAL_GPIO_Init+0xea>
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	2b12      	cmp	r3, #18
 8000994:	d123      	bne.n	80009de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	08da      	lsrs	r2, r3, #3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3208      	adds	r2, #8
 800099e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	220f      	movs	r2, #15
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	691a      	ldr	r2, [r3, #16]
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	f003 0307 	and.w	r3, r3, #7
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	08da      	lsrs	r2, r3, #3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3208      	adds	r2, #8
 80009d8:	6939      	ldr	r1, [r7, #16]
 80009da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	2203      	movs	r2, #3
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f003 0203 	and.w	r2, r3, #3
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 809a 	beq.w	8000b54 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a20:	4b55      	ldr	r3, [pc, #340]	; (8000b78 <HAL_GPIO_Init+0x2cc>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a54      	ldr	r2, [pc, #336]	; (8000b78 <HAL_GPIO_Init+0x2cc>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b52      	ldr	r3, [pc, #328]	; (8000b78 <HAL_GPIO_Init+0x2cc>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a38:	4a50      	ldr	r2, [pc, #320]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	089b      	lsrs	r3, r3, #2
 8000a3e:	3302      	adds	r3, #2
 8000a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	f003 0303 	and.w	r3, r3, #3
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	220f      	movs	r2, #15
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a62:	d013      	beq.n	8000a8c <HAL_GPIO_Init+0x1e0>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a46      	ldr	r2, [pc, #280]	; (8000b80 <HAL_GPIO_Init+0x2d4>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d00d      	beq.n	8000a88 <HAL_GPIO_Init+0x1dc>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a45      	ldr	r2, [pc, #276]	; (8000b84 <HAL_GPIO_Init+0x2d8>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d007      	beq.n	8000a84 <HAL_GPIO_Init+0x1d8>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a44      	ldr	r2, [pc, #272]	; (8000b88 <HAL_GPIO_Init+0x2dc>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d101      	bne.n	8000a80 <HAL_GPIO_Init+0x1d4>
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e006      	b.n	8000a8e <HAL_GPIO_Init+0x1e2>
 8000a80:	2305      	movs	r3, #5
 8000a82:	e004      	b.n	8000a8e <HAL_GPIO_Init+0x1e2>
 8000a84:	2302      	movs	r3, #2
 8000a86:	e002      	b.n	8000a8e <HAL_GPIO_Init+0x1e2>
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e000      	b.n	8000a8e <HAL_GPIO_Init+0x1e2>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	f002 0203 	and.w	r2, r2, #3
 8000a94:	0092      	lsls	r2, r2, #2
 8000a96:	4093      	lsls	r3, r2
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a9e:	4937      	ldr	r1, [pc, #220]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	089b      	lsrs	r3, r3, #2
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aac:	4b37      	ldr	r3, [pc, #220]	; (8000b8c <HAL_GPIO_Init+0x2e0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ad0:	4a2e      	ldr	r2, [pc, #184]	; (8000b8c <HAL_GPIO_Init+0x2e0>)
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ad6:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <HAL_GPIO_Init+0x2e0>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000afa:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <HAL_GPIO_Init+0x2e0>)
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <HAL_GPIO_Init+0x2e0>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b24:	4a19      	ldr	r2, [pc, #100]	; (8000b8c <HAL_GPIO_Init+0x2e0>)
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_GPIO_Init+0x2e0>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_GPIO_Init+0x2e0>)
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	3301      	adds	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	fa22 f303 	lsr.w	r3, r2, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f47f aea9 	bne.w	80008bc <HAL_GPIO_Init+0x10>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	bf00      	nop
 8000b6e:	371c      	adds	r7, #28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010000 	.word	0x40010000
 8000b80:	48000400 	.word	0x48000400
 8000b84:	48000800 	.word	0x48000800
 8000b88:	48000c00 	.word	0x48000c00
 8000b8c:	40010400 	.word	0x40010400

08000b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ba0:	787b      	ldrb	r3, [r7, #1]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bac:	e002      	b.n	8000bb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bae:	887a      	ldrh	r2, [r7, #2]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f000 bef4 	b.w	80019c2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	f000 816a 	beq.w	8000ebe <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bea:	4bb3      	ldr	r3, [pc, #716]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 030c 	and.w	r3, r3, #12
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	d00c      	beq.n	8000c10 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bf6:	4bb0      	ldr	r3, [pc, #704]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
 8000bfe:	2b08      	cmp	r3, #8
 8000c00:	d159      	bne.n	8000cb6 <HAL_RCC_OscConfig+0xf6>
 8000c02:	4bad      	ldr	r3, [pc, #692]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c0e:	d152      	bne.n	8000cb6 <HAL_RCC_OscConfig+0xf6>
 8000c10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c14:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c18:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c1c:	fa93 f3a3 	rbit	r3, r3
 8000c20:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c24:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c28:	fab3 f383 	clz	r3, r3
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d102      	bne.n	8000c42 <HAL_RCC_OscConfig+0x82>
 8000c3c:	4b9e      	ldr	r3, [pc, #632]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	e015      	b.n	8000c6e <HAL_RCC_OscConfig+0xae>
 8000c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c46:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c4a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000c4e:	fa93 f3a3 	rbit	r3, r3
 8000c52:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c5a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c5e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c62:	fa93 f3a3 	rbit	r3, r3
 8000c66:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c6a:	4b93      	ldr	r3, [pc, #588]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c72:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c76:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c7a:	fa92 f2a2 	rbit	r2, r2
 8000c7e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000c82:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c86:	fab2 f282 	clz	r2, r2
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	f042 0220 	orr.w	r2, r2, #32
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	f002 021f 	and.w	r2, r2, #31
 8000c96:	2101      	movs	r1, #1
 8000c98:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 810c 	beq.w	8000ebc <HAL_RCC_OscConfig+0x2fc>
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f040 8106 	bne.w	8000ebc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f000 be86 	b.w	80019c2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc0:	d106      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x110>
 8000cc2:	4b7d      	ldr	r3, [pc, #500]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a7c      	ldr	r2, [pc, #496]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ccc:	6013      	str	r3, [r2, #0]
 8000cce:	e030      	b.n	8000d32 <HAL_RCC_OscConfig+0x172>
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10c      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x134>
 8000cda:	4b77      	ldr	r3, [pc, #476]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a76      	ldr	r2, [pc, #472]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4b74      	ldr	r3, [pc, #464]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a73      	ldr	r2, [pc, #460]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e01e      	b.n	8000d32 <HAL_RCC_OscConfig+0x172>
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cfe:	d10c      	bne.n	8000d1a <HAL_RCC_OscConfig+0x15a>
 8000d00:	4b6d      	ldr	r3, [pc, #436]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a6c      	ldr	r2, [pc, #432]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000d06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b6a      	ldr	r3, [pc, #424]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a69      	ldr	r2, [pc, #420]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	e00b      	b.n	8000d32 <HAL_RCC_OscConfig+0x172>
 8000d1a:	4b67      	ldr	r3, [pc, #412]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a66      	ldr	r2, [pc, #408]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	4b64      	ldr	r3, [pc, #400]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a63      	ldr	r2, [pc, #396]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d30:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d32:	4b61      	ldr	r3, [pc, #388]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	f023 020f 	bic.w	r2, r3, #15
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	495d      	ldr	r1, [pc, #372]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d059      	beq.n	8000e04 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d50:	f7ff fcba 	bl	80006c8 <HAL_GetTick>
 8000d54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d58:	e00a      	b.n	8000d70 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d5a:	f7ff fcb5 	bl	80006c8 <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b64      	cmp	r3, #100	; 0x64
 8000d68:	d902      	bls.n	8000d70 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	f000 be29 	b.w	80019c2 <HAL_RCC_OscConfig+0xe02>
 8000d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d74:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d78:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d7c:	fa93 f3a3 	rbit	r3, r3
 8000d80:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000d84:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d88:	fab3 f383 	clz	r3, r3
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d102      	bne.n	8000da2 <HAL_RCC_OscConfig+0x1e2>
 8000d9c:	4b46      	ldr	r3, [pc, #280]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	e015      	b.n	8000dce <HAL_RCC_OscConfig+0x20e>
 8000da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000daa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000dae:	fa93 f3a3 	rbit	r3, r3
 8000db2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000dbe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000dc2:	fa93 f3a3 	rbit	r3, r3
 8000dc6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000dca:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dd2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000dd6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000dda:	fa92 f2a2 	rbit	r2, r2
 8000dde:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000de2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000de6:	fab2 f282 	clz	r2, r2
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	f042 0220 	orr.w	r2, r2, #32
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	f002 021f 	and.w	r2, r2, #31
 8000df6:	2101      	movs	r1, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0ab      	beq.n	8000d5a <HAL_RCC_OscConfig+0x19a>
 8000e02:	e05c      	b.n	8000ebe <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e04:	f7ff fc60 	bl	80006c8 <HAL_GetTick>
 8000e08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e0c:	e00a      	b.n	8000e24 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e0e:	f7ff fc5b 	bl	80006c8 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b64      	cmp	r3, #100	; 0x64
 8000e1c:	d902      	bls.n	8000e24 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	f000 bdcf 	b.w	80019c2 <HAL_RCC_OscConfig+0xe02>
 8000e24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e28:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000e30:	fa93 f3a3 	rbit	r3, r3
 8000e34:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000e38:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e3c:	fab3 f383 	clz	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d102      	bne.n	8000e56 <HAL_RCC_OscConfig+0x296>
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	e015      	b.n	8000e82 <HAL_RCC_OscConfig+0x2c2>
 8000e56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e5a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000e62:	fa93 f3a3 	rbit	r3, r3
 8000e66:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e72:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e76:	fa93 f3a3 	rbit	r3, r3
 8000e7a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_RCC_OscConfig+0x2f8>)
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e86:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e8a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e8e:	fa92 f2a2 	rbit	r2, r2
 8000e92:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000e96:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000e9a:	fab2 f282 	clz	r2, r2
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	f042 0220 	orr.w	r2, r2, #32
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	f002 021f 	and.w	r2, r2, #31
 8000eaa:	2101      	movs	r1, #1
 8000eac:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1ab      	bne.n	8000e0e <HAL_RCC_OscConfig+0x24e>
 8000eb6:	e002      	b.n	8000ebe <HAL_RCC_OscConfig+0x2fe>
 8000eb8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 816f 	beq.w	80011ac <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ece:	4bd0      	ldr	r3, [pc, #832]	; (8001210 <HAL_RCC_OscConfig+0x650>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00b      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eda:	4bcd      	ldr	r3, [pc, #820]	; (8001210 <HAL_RCC_OscConfig+0x650>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d16c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x400>
 8000ee6:	4bca      	ldr	r3, [pc, #808]	; (8001210 <HAL_RCC_OscConfig+0x650>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d166      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x400>
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000efc:	fa93 f3a3 	rbit	r3, r3
 8000f00:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000f04:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f08:	fab3 f383 	clz	r3, r3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d102      	bne.n	8000f22 <HAL_RCC_OscConfig+0x362>
 8000f1c:	4bbc      	ldr	r3, [pc, #752]	; (8001210 <HAL_RCC_OscConfig+0x650>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	e013      	b.n	8000f4a <HAL_RCC_OscConfig+0x38a>
 8000f22:	2302      	movs	r3, #2
 8000f24:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f28:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f2c:	fa93 f3a3 	rbit	r3, r3
 8000f30:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f34:	2302      	movs	r3, #2
 8000f36:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f3e:	fa93 f3a3 	rbit	r3, r3
 8000f42:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f46:	4bb2      	ldr	r3, [pc, #712]	; (8001210 <HAL_RCC_OscConfig+0x650>)
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000f50:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f54:	fa92 f2a2 	rbit	r2, r2
 8000f58:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000f5c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f60:	fab2 f282 	clz	r2, r2
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	f042 0220 	orr.w	r2, r2, #32
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	f002 021f 	and.w	r2, r2, #31
 8000f70:	2101      	movs	r1, #1
 8000f72:	fa01 f202 	lsl.w	r2, r1, r2
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d007      	beq.n	8000f8c <HAL_RCC_OscConfig+0x3cc>
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d002      	beq.n	8000f8c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	f000 bd1b 	b.w	80019c2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8c:	4ba0      	ldr	r3, [pc, #640]	; (8001210 <HAL_RCC_OscConfig+0x650>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	21f8      	movs	r1, #248	; 0xf8
 8000f9c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000fa4:	fa91 f1a1 	rbit	r1, r1
 8000fa8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000fac:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000fb0:	fab1 f181 	clz	r1, r1
 8000fb4:	b2c9      	uxtb	r1, r1
 8000fb6:	408b      	lsls	r3, r1
 8000fb8:	4995      	ldr	r1, [pc, #596]	; (8001210 <HAL_RCC_OscConfig+0x650>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbe:	e0f5      	b.n	80011ac <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 8085 	beq.w	80010d6 <HAL_RCC_OscConfig+0x516>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000fde:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe2:	fab3 f383 	clz	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fb66 	bl	80006c8 <HAL_GetTick>
 8000ffc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001000:	e00a      	b.n	8001018 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001002:	f7ff fb61 	bl	80006c8 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d902      	bls.n	8001018 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	f000 bcd5 	b.w	80019c2 <HAL_RCC_OscConfig+0xe02>
 8001018:	2302      	movs	r3, #2
 800101a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800102a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102e:	fab3 f383 	clz	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	095b      	lsrs	r3, r3, #5
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <HAL_RCC_OscConfig+0x488>
 8001042:	4b73      	ldr	r3, [pc, #460]	; (8001210 <HAL_RCC_OscConfig+0x650>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	e013      	b.n	8001070 <HAL_RCC_OscConfig+0x4b0>
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001052:	fa93 f3a3 	rbit	r3, r3
 8001056:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001060:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001064:	fa93 f3a3 	rbit	r3, r3
 8001068:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <HAL_RCC_OscConfig+0x650>)
 800106e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001070:	2202      	movs	r2, #2
 8001072:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001076:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800107a:	fa92 f2a2 	rbit	r2, r2
 800107e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001082:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001086:	fab2 f282 	clz	r2, r2
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	f042 0220 	orr.w	r2, r2, #32
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	f002 021f 	and.w	r2, r2, #31
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	4013      	ands	r3, r2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0af      	beq.n	8001002 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a2:	4b5b      	ldr	r3, [pc, #364]	; (8001210 <HAL_RCC_OscConfig+0x650>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	21f8      	movs	r1, #248	; 0xf8
 80010b2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010ba:	fa91 f1a1 	rbit	r1, r1
 80010be:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80010c2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80010c6:	fab1 f181 	clz	r1, r1
 80010ca:	b2c9      	uxtb	r1, r1
 80010cc:	408b      	lsls	r3, r1
 80010ce:	4950      	ldr	r1, [pc, #320]	; (8001210 <HAL_RCC_OscConfig+0x650>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]
 80010d4:	e06a      	b.n	80011ac <HAL_RCC_OscConfig+0x5ec>
 80010d6:	2301      	movs	r3, #1
 80010d8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010e0:	fa93 f3a3 	rbit	r3, r3
 80010e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80010e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ec:	fab3 f383 	clz	r3, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	461a      	mov	r2, r3
 80010fe:	2300      	movs	r3, #0
 8001100:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001102:	f7ff fae1 	bl	80006c8 <HAL_GetTick>
 8001106:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	e00a      	b.n	8001122 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110c:	f7ff fadc 	bl	80006c8 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d902      	bls.n	8001122 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	f000 bc50 	b.w	80019c2 <HAL_RCC_OscConfig+0xe02>
 8001122:	2302      	movs	r3, #2
 8001124:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001128:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800112c:	fa93 f3a3 	rbit	r3, r3
 8001130:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001138:	fab3 f383 	clz	r3, r3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b01      	cmp	r3, #1
 800114a:	d102      	bne.n	8001152 <HAL_RCC_OscConfig+0x592>
 800114c:	4b30      	ldr	r3, [pc, #192]	; (8001210 <HAL_RCC_OscConfig+0x650>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	e013      	b.n	800117a <HAL_RCC_OscConfig+0x5ba>
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001158:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800116a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800116e:	fa93 f3a3 	rbit	r3, r3
 8001172:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_RCC_OscConfig+0x650>)
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	2202      	movs	r2, #2
 800117c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001180:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001184:	fa92 f2a2 	rbit	r2, r2
 8001188:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800118c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001190:	fab2 f282 	clz	r2, r2
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	f042 0220 	orr.w	r2, r2, #32
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	f002 021f 	and.w	r2, r2, #31
 80011a0:	2101      	movs	r1, #1
 80011a2:	fa01 f202 	lsl.w	r2, r1, r2
 80011a6:	4013      	ands	r3, r2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1af      	bne.n	800110c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 80da 	beq.w	8001370 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d069      	beq.n	800129a <HAL_RCC_OscConfig+0x6da>
 80011c6:	2301      	movs	r3, #1
 80011c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011d0:	fa93 f3a3 	rbit	r3, r3
 80011d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80011d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011dc:	fab3 f383 	clz	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_RCC_OscConfig+0x654>)
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	461a      	mov	r2, r3
 80011ec:	2301      	movs	r3, #1
 80011ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f0:	f7ff fa6a 	bl	80006c8 <HAL_GetTick>
 80011f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f8:	e00e      	b.n	8001218 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011fa:	f7ff fa65 	bl	80006c8 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d906      	bls.n	8001218 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e3d9      	b.n	80019c2 <HAL_RCC_OscConfig+0xe02>
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	10908120 	.word	0x10908120
 8001218:	2302      	movs	r3, #2
 800121a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800122a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800122e:	2202      	movs	r2, #2
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	fa93 f2a3 	rbit	r2, r3
 800123c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001246:	2202      	movs	r2, #2
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	fa93 f2a3 	rbit	r2, r3
 8001254:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001258:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125a:	4ba5      	ldr	r3, [pc, #660]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 800125c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800125e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001262:	2102      	movs	r1, #2
 8001264:	6019      	str	r1, [r3, #0]
 8001266:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	fa93 f1a3 	rbit	r1, r3
 8001270:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001274:	6019      	str	r1, [r3, #0]
  return result;
 8001276:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	fab3 f383 	clz	r3, r3
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	2101      	movs	r1, #1
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0b0      	beq.n	80011fa <HAL_RCC_OscConfig+0x63a>
 8001298:	e06a      	b.n	8001370 <HAL_RCC_OscConfig+0x7b0>
 800129a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	fa93 f2a3 	rbit	r2, r3
 80012ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012b0:	601a      	str	r2, [r3, #0]
  return result;
 80012b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012b6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b8:	fab3 f383 	clz	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	4b8c      	ldr	r3, [pc, #560]	; (80014f4 <HAL_RCC_OscConfig+0x934>)
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	461a      	mov	r2, r3
 80012c8:	2300      	movs	r3, #0
 80012ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012cc:	f7ff f9fc 	bl	80006c8 <HAL_GetTick>
 80012d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d4:	e009      	b.n	80012ea <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d6:	f7ff f9f7 	bl	80006c8 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e36b      	b.n	80019c2 <HAL_RCC_OscConfig+0xe02>
 80012ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012ee:	2202      	movs	r2, #2
 80012f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	fa93 f2a3 	rbit	r2, r3
 80012fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001306:	2202      	movs	r2, #2
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	fa93 f2a3 	rbit	r2, r3
 8001314:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800131e:	2202      	movs	r2, #2
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	fa93 f2a3 	rbit	r2, r3
 800132c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001330:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001332:	4b6f      	ldr	r3, [pc, #444]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 8001334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001336:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800133a:	2102      	movs	r1, #2
 800133c:	6019      	str	r1, [r3, #0]
 800133e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	fa93 f1a3 	rbit	r1, r3
 8001348:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800134c:	6019      	str	r1, [r3, #0]
  return result;
 800134e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f003 031f 	and.w	r3, r3, #31
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	4013      	ands	r3, r2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1b2      	bne.n	80012d6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 8158 	beq.w	8001630 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001386:	4b5a      	ldr	r3, [pc, #360]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d112      	bne.n	80013b8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b57      	ldr	r3, [pc, #348]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4a56      	ldr	r2, [pc, #344]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	61d3      	str	r3, [r2, #28]
 800139e:	4b54      	ldr	r3, [pc, #336]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013b2:	2301      	movs	r3, #1
 80013b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	4b4f      	ldr	r3, [pc, #316]	; (80014f8 <HAL_RCC_OscConfig+0x938>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d11a      	bne.n	80013fa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c4:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <HAL_RCC_OscConfig+0x938>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <HAL_RCC_OscConfig+0x938>)
 80013ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ce:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d0:	f7ff f97a 	bl	80006c8 <HAL_GetTick>
 80013d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	e009      	b.n	80013ee <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013da:	f7ff f975 	bl	80006c8 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e2e9      	b.n	80019c2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ee:	4b42      	ldr	r3, [pc, #264]	; (80014f8 <HAL_RCC_OscConfig+0x938>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0ef      	beq.n	80013da <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x852>
 8001404:	4b3a      	ldr	r3, [pc, #232]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4a39      	ldr	r2, [pc, #228]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6213      	str	r3, [r2, #32]
 8001410:	e02f      	b.n	8001472 <HAL_RCC_OscConfig+0x8b2>
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10c      	bne.n	8001436 <HAL_RCC_OscConfig+0x876>
 800141c:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	4a33      	ldr	r2, [pc, #204]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	6213      	str	r3, [r2, #32]
 8001428:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	4a30      	ldr	r2, [pc, #192]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 800142e:	f023 0304 	bic.w	r3, r3, #4
 8001432:	6213      	str	r3, [r2, #32]
 8001434:	e01d      	b.n	8001472 <HAL_RCC_OscConfig+0x8b2>
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b05      	cmp	r3, #5
 800143e:	d10c      	bne.n	800145a <HAL_RCC_OscConfig+0x89a>
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	4a2a      	ldr	r2, [pc, #168]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6213      	str	r3, [r2, #32]
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	4a27      	ldr	r2, [pc, #156]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6213      	str	r3, [r2, #32]
 8001458:	e00b      	b.n	8001472 <HAL_RCC_OscConfig+0x8b2>
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	6213      	str	r3, [r2, #32]
 8001466:	4b22      	ldr	r3, [pc, #136]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 800146c:	f023 0304 	bic.w	r3, r3, #4
 8001470:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d06b      	beq.n	8001554 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147c:	f7ff f924 	bl	80006c8 <HAL_GetTick>
 8001480:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001484:	e00b      	b.n	800149e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff f91f 	bl	80006c8 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	; 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e291      	b.n	80019c2 <HAL_RCC_OscConfig+0xe02>
 800149e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014a2:	2202      	movs	r2, #2
 80014a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fa93 f2a3 	rbit	r2, r3
 80014b0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014ba:	2202      	movs	r2, #2
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	fa93 f2a3 	rbit	r2, r3
 80014c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014cc:	601a      	str	r2, [r3, #0]
  return result;
 80014ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014d2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d4:	fab3 f383 	clz	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d109      	bne.n	80014fc <HAL_RCC_OscConfig+0x93c>
 80014e8:	4b01      	ldr	r3, [pc, #4]	; (80014f0 <HAL_RCC_OscConfig+0x930>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	e014      	b.n	8001518 <HAL_RCC_OscConfig+0x958>
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	10908120 	.word	0x10908120
 80014f8:	40007000 	.word	0x40007000
 80014fc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001500:	2202      	movs	r2, #2
 8001502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001504:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fa93 f2a3 	rbit	r2, r3
 800150e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	4bbb      	ldr	r3, [pc, #748]	; (8001804 <HAL_RCC_OscConfig+0xc44>)
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800151c:	2102      	movs	r1, #2
 800151e:	6011      	str	r1, [r2, #0]
 8001520:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	fa92 f1a2 	rbit	r1, r2
 800152a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800152e:	6011      	str	r1, [r2, #0]
  return result;
 8001530:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	fab2 f282 	clz	r2, r2
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	f002 021f 	and.w	r2, r2, #31
 8001546:	2101      	movs	r1, #1
 8001548:	fa01 f202 	lsl.w	r2, r1, r2
 800154c:	4013      	ands	r3, r2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d099      	beq.n	8001486 <HAL_RCC_OscConfig+0x8c6>
 8001552:	e063      	b.n	800161c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001554:	f7ff f8b8 	bl	80006c8 <HAL_GetTick>
 8001558:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155c:	e00b      	b.n	8001576 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155e:	f7ff f8b3 	bl	80006c8 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	f241 3288 	movw	r2, #5000	; 0x1388
 800156e:	4293      	cmp	r3, r2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e225      	b.n	80019c2 <HAL_RCC_OscConfig+0xe02>
 8001576:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800157a:	2202      	movs	r2, #2
 800157c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	fa93 f2a3 	rbit	r2, r3
 8001588:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001592:	2202      	movs	r2, #2
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	fa93 f2a3 	rbit	r2, r3
 80015a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015a4:	601a      	str	r2, [r3, #0]
  return result;
 80015a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	fab3 f383 	clz	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d102      	bne.n	80015c6 <HAL_RCC_OscConfig+0xa06>
 80015c0:	4b90      	ldr	r3, [pc, #576]	; (8001804 <HAL_RCC_OscConfig+0xc44>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	e00d      	b.n	80015e2 <HAL_RCC_OscConfig+0xa22>
 80015c6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015ca:	2202      	movs	r2, #2
 80015cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	fa93 f2a3 	rbit	r2, r3
 80015d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	4b89      	ldr	r3, [pc, #548]	; (8001804 <HAL_RCC_OscConfig+0xc44>)
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015e6:	2102      	movs	r1, #2
 80015e8:	6011      	str	r1, [r2, #0]
 80015ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	fa92 f1a2 	rbit	r1, r2
 80015f4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80015f8:	6011      	str	r1, [r2, #0]
  return result;
 80015fa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	fab2 f282 	clz	r2, r2
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	f002 021f 	and.w	r2, r2, #31
 8001610:	2101      	movs	r1, #1
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1a0      	bne.n	800155e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800161c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001624:	4b77      	ldr	r3, [pc, #476]	; (8001804 <HAL_RCC_OscConfig+0xc44>)
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	4a76      	ldr	r2, [pc, #472]	; (8001804 <HAL_RCC_OscConfig+0xc44>)
 800162a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 81c2 	beq.w	80019c0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800163c:	4b71      	ldr	r3, [pc, #452]	; (8001804 <HAL_RCC_OscConfig+0xc44>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	f000 819c 	beq.w	8001982 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	2b02      	cmp	r3, #2
 8001652:	f040 8114 	bne.w	800187e <HAL_RCC_OscConfig+0xcbe>
 8001656:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800165a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800165e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fa93 f2a3 	rbit	r2, r3
 800166a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800166e:	601a      	str	r2, [r3, #0]
  return result;
 8001670:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001674:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	fab3 f383 	clz	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001680:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	461a      	mov	r2, r3
 8001688:	2300      	movs	r3, #0
 800168a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff f81c 	bl	80006c8 <HAL_GetTick>
 8001690:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001694:	e009      	b.n	80016aa <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001696:	f7ff f817 	bl	80006c8 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e18b      	b.n	80019c2 <HAL_RCC_OscConfig+0xe02>
 80016aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	fa93 f2a3 	rbit	r2, r3
 80016be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016c2:	601a      	str	r2, [r3, #0]
  return result;
 80016c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ca:	fab3 f383 	clz	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	095b      	lsrs	r3, r3, #5
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d102      	bne.n	80016e4 <HAL_RCC_OscConfig+0xb24>
 80016de:	4b49      	ldr	r3, [pc, #292]	; (8001804 <HAL_RCC_OscConfig+0xc44>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	e01b      	b.n	800171c <HAL_RCC_OscConfig+0xb5c>
 80016e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	fa93 f2a3 	rbit	r2, r3
 80016f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001702:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	fa93 f2a3 	rbit	r2, r3
 8001712:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <HAL_RCC_OscConfig+0xc44>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001720:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001724:	6011      	str	r1, [r2, #0]
 8001726:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	fa92 f1a2 	rbit	r1, r2
 8001730:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001734:	6011      	str	r1, [r2, #0]
  return result;
 8001736:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	fab2 f282 	clz	r2, r2
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f042 0220 	orr.w	r2, r2, #32
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f002 021f 	and.w	r2, r2, #31
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d19e      	bne.n	8001696 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001758:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <HAL_RCC_OscConfig+0xc44>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	430b      	orrs	r3, r1
 800176e:	4925      	ldr	r1, [pc, #148]	; (8001804 <HAL_RCC_OscConfig+0xc44>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
 8001774:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800177c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fa93 f2a3 	rbit	r2, r3
 8001788:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800178c:	601a      	str	r2, [r3, #0]
  return result;
 800178e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001792:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001794:	fab3 f383 	clz	r3, r3
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800179e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	461a      	mov	r2, r3
 80017a6:	2301      	movs	r3, #1
 80017a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7fe ff8d 	bl	80006c8 <HAL_GetTick>
 80017ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b2:	e009      	b.n	80017c8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7fe ff88 	bl	80006c8 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0fc      	b.n	80019c2 <HAL_RCC_OscConfig+0xe02>
 80017c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	fa93 f2a3 	rbit	r2, r3
 80017dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017e0:	601a      	str	r2, [r3, #0]
  return result;
 80017e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_RCC_OscConfig+0xc48>
 80017fc:	4b01      	ldr	r3, [pc, #4]	; (8001804 <HAL_RCC_OscConfig+0xc44>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	e01e      	b.n	8001840 <HAL_RCC_OscConfig+0xc80>
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800180c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fa93 f2a3 	rbit	r2, r3
 800181c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001826:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	fa93 f2a3 	rbit	r2, r3
 8001836:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	4b63      	ldr	r3, [pc, #396]	; (80019cc <HAL_RCC_OscConfig+0xe0c>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001844:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001848:	6011      	str	r1, [r2, #0]
 800184a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	fa92 f1a2 	rbit	r1, r2
 8001854:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001858:	6011      	str	r1, [r2, #0]
  return result;
 800185a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	fab2 f282 	clz	r2, r2
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	f042 0220 	orr.w	r2, r2, #32
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	f002 021f 	and.w	r2, r2, #31
 8001870:	2101      	movs	r1, #1
 8001872:	fa01 f202 	lsl.w	r2, r1, r2
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d09b      	beq.n	80017b4 <HAL_RCC_OscConfig+0xbf4>
 800187c:	e0a0      	b.n	80019c0 <HAL_RCC_OscConfig+0xe00>
 800187e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001882:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	fa93 f2a3 	rbit	r2, r3
 8001892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001896:	601a      	str	r2, [r3, #0]
  return result;
 8001898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	fab3 f383 	clz	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	461a      	mov	r2, r3
 80018b0:	2300      	movs	r3, #0
 80018b2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7fe ff08 	bl	80006c8 <HAL_GetTick>
 80018b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018bc:	e009      	b.n	80018d2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018be:	f7fe ff03 	bl	80006c8 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e077      	b.n	80019c2 <HAL_RCC_OscConfig+0xe02>
 80018d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	fa93 f2a3 	rbit	r2, r3
 80018e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ea:	601a      	str	r2, [r3, #0]
  return result;
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f2:	fab3 f383 	clz	r3, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	095b      	lsrs	r3, r3, #5
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b01      	cmp	r3, #1
 8001904:	d102      	bne.n	800190c <HAL_RCC_OscConfig+0xd4c>
 8001906:	4b31      	ldr	r3, [pc, #196]	; (80019cc <HAL_RCC_OscConfig+0xe0c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	e01b      	b.n	8001944 <HAL_RCC_OscConfig+0xd84>
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f107 0320 	add.w	r3, r7, #32
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	fa93 f2a3 	rbit	r2, r3
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	f107 0318 	add.w	r3, r7, #24
 800192a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	f107 0318 	add.w	r3, r7, #24
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fa93 f2a3 	rbit	r2, r3
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_RCC_OscConfig+0xe0c>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	f107 0210 	add.w	r2, r7, #16
 8001948:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800194c:	6011      	str	r1, [r2, #0]
 800194e:	f107 0210 	add.w	r2, r7, #16
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	fa92 f1a2 	rbit	r1, r2
 8001958:	f107 020c 	add.w	r2, r7, #12
 800195c:	6011      	str	r1, [r2, #0]
  return result;
 800195e:	f107 020c 	add.w	r2, r7, #12
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	fab2 f282 	clz	r2, r2
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	f042 0220 	orr.w	r2, r2, #32
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	f002 021f 	and.w	r2, r2, #31
 8001974:	2101      	movs	r1, #1
 8001976:	fa01 f202 	lsl.w	r2, r1, r2
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d19e      	bne.n	80018be <HAL_RCC_OscConfig+0xcfe>
 8001980:	e01e      	b.n	80019c0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e018      	b.n	80019c2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_RCC_OscConfig+0xe0c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001998:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800199c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d108      	bne.n	80019bc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80019aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b09e      	sub	sp, #120	; 0x78
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e162      	b.n	8001cae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b90      	ldr	r3, [pc, #576]	; (8001c2c <HAL_RCC_ClockConfig+0x25c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d910      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b8d      	ldr	r3, [pc, #564]	; (8001c2c <HAL_RCC_ClockConfig+0x25c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 0207 	bic.w	r2, r3, #7
 80019fe:	498b      	ldr	r1, [pc, #556]	; (8001c2c <HAL_RCC_ClockConfig+0x25c>)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b89      	ldr	r3, [pc, #548]	; (8001c2c <HAL_RCC_ClockConfig+0x25c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e14a      	b.n	8001cae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a24:	4b82      	ldr	r3, [pc, #520]	; (8001c30 <HAL_RCC_ClockConfig+0x260>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	497f      	ldr	r1, [pc, #508]	; (8001c30 <HAL_RCC_ClockConfig+0x260>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 80dc 	beq.w	8001bfc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d13c      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xf6>
 8001a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a50:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d102      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xa6>
 8001a70:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <HAL_RCC_ClockConfig+0x260>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	e00f      	b.n	8001a96 <HAL_RCC_ClockConfig+0xc6>
 8001a76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	667b      	str	r3, [r7, #100]	; 0x64
 8001a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a88:	663b      	str	r3, [r7, #96]	; 0x60
 8001a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a8c:	fa93 f3a3 	rbit	r3, r3
 8001a90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a92:	4b67      	ldr	r3, [pc, #412]	; (8001c30 <HAL_RCC_ClockConfig+0x260>)
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a9e:	fa92 f2a2 	rbit	r2, r2
 8001aa2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001aa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001aa6:	fab2 f282 	clz	r2, r2
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	f042 0220 	orr.w	r2, r2, #32
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	f002 021f 	and.w	r2, r2, #31
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d17b      	bne.n	8001bba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0f3      	b.n	8001cae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d13c      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x178>
 8001ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	095b      	lsrs	r3, r3, #5
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d102      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x128>
 8001af2:	4b4f      	ldr	r3, [pc, #316]	; (8001c30 <HAL_RCC_ClockConfig+0x260>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	e00f      	b.n	8001b18 <HAL_RCC_ClockConfig+0x148>
 8001af8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001afc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b00:	fa93 f3a3 	rbit	r3, r3
 8001b04:	647b      	str	r3, [r7, #68]	; 0x44
 8001b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8001b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b14:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <HAL_RCC_ClockConfig+0x260>)
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b1c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b20:	fa92 f2a2 	rbit	r2, r2
 8001b24:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b28:	fab2 f282 	clz	r2, r2
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	f042 0220 	orr.w	r2, r2, #32
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	f002 021f 	and.w	r2, r2, #31
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d13a      	bne.n	8001bba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0b2      	b.n	8001cae <HAL_RCC_ClockConfig+0x2de>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	095b      	lsrs	r3, r3, #5
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d102      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x1a0>
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_RCC_ClockConfig+0x260>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	e00d      	b.n	8001b8c <HAL_RCC_ClockConfig+0x1bc>
 8001b70:	2302      	movs	r3, #2
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	623b      	str	r3, [r7, #32]
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	61fb      	str	r3, [r7, #28]
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <HAL_RCC_ClockConfig+0x260>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	61ba      	str	r2, [r7, #24]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	fa92 f2a2 	rbit	r2, r2
 8001b96:	617a      	str	r2, [r7, #20]
  return result;
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	fab2 f282 	clz	r2, r2
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	f042 0220 	orr.w	r2, r2, #32
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	f002 021f 	and.w	r2, r2, #31
 8001baa:	2101      	movs	r1, #1
 8001bac:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e079      	b.n	8001cae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_RCC_ClockConfig+0x260>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f023 0203 	bic.w	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	491a      	ldr	r1, [pc, #104]	; (8001c30 <HAL_RCC_ClockConfig+0x260>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bcc:	f7fe fd7c 	bl	80006c8 <HAL_GetTick>
 8001bd0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7fe fd78 	bl	80006c8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e061      	b.n	8001cae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_RCC_ClockConfig+0x260>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 020c 	and.w	r2, r3, #12
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1eb      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_ClockConfig+0x25c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d214      	bcs.n	8001c34 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_RCC_ClockConfig+0x25c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 0207 	bic.w	r2, r3, #7
 8001c12:	4906      	ldr	r1, [pc, #24]	; (8001c2c <HAL_RCC_ClockConfig+0x25c>)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <HAL_RCC_ClockConfig+0x25c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e040      	b.n	8001cae <HAL_RCC_ClockConfig+0x2de>
 8001c2c:	40022000 	.word	0x40022000
 8001c30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	491a      	ldr	r1, [pc, #104]	; (8001cb8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4912      	ldr	r1, [pc, #72]	; (8001cb8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c72:	f000 f829 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c76:	4601      	mov	r1, r0
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_RCC_ClockConfig+0x2e8>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c80:	22f0      	movs	r2, #240	; 0xf0
 8001c82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	fa92 f2a2 	rbit	r2, r2
 8001c8a:	60fa      	str	r2, [r7, #12]
  return result;
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	fab2 f282 	clz	r2, r2
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	40d3      	lsrs	r3, r2
 8001c96:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <HAL_RCC_ClockConfig+0x2ec>)
 8001c98:	5cd3      	ldrb	r3, [r2, r3]
 8001c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c9e:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_RCC_ClockConfig+0x2f0>)
 8001ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_RCC_ClockConfig+0x2f4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fcca 	bl	8000640 <HAL_InitTick>
  
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3778      	adds	r7, #120	; 0x78
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	080026f0 	.word	0x080026f0
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b08b      	sub	sp, #44	; 0x2c
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d002      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x30>
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d003      	beq.n	8001cfe <HAL_RCC_GetSysClockFreq+0x36>
 8001cf6:	e03c      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cfa:	623b      	str	r3, [r7, #32]
      break;
 8001cfc:	e03c      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d04:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d08:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	fa92 f2a2 	rbit	r2, r2
 8001d10:	607a      	str	r2, [r7, #4]
  return result;
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	fab2 f282 	clz	r2, r2
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	40d3      	lsrs	r3, r2
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
 8001d20:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d22:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	fa92 f2a2 	rbit	r2, r2
 8001d34:	60fa      	str	r2, [r7, #12]
  return result;
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	fab2 f282 	clz	r2, r2
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	40d3      	lsrs	r3, r2
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d50:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d60:	e004      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	4a0c      	ldr	r2, [pc, #48]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	623b      	str	r3, [r7, #32]
      break;
 8001d70:	e002      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d74:	623b      	str	r3, [r7, #32]
      break;
 8001d76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d78:	6a3b      	ldr	r3, [r7, #32]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	372c      	adds	r7, #44	; 0x2c
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	007a1200 	.word	0x007a1200
 8001d90:	08002700 	.word	0x08002700
 8001d94:	08002710 	.word	0x08002710
 8001d98:	003d0900 	.word	0x003d0900

08001d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e09d      	b.n	8001eea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d108      	bne.n	8001dc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dbe:	d009      	beq.n	8001dd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
 8001dc6:	e005      	b.n	8001dd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe fb42 	bl	8000478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e14:	d902      	bls.n	8001e1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	e002      	b.n	8001e22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001e2a:	d007      	beq.n	8001e3c <HAL_SPI_Init+0xa0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e34:	d002      	beq.n	8001e3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7e:	ea42 0103 	orr.w	r1, r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	0c1b      	lsrs	r3, r3, #16
 8001e98:	f003 0204 	and.w	r2, r3, #4
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001eb8:	ea42 0103 	orr.w	r1, r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b088      	sub	sp, #32
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	60f8      	str	r0, [r7, #12]
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	4613      	mov	r3, r2
 8001f00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_SPI_Transmit+0x22>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e158      	b.n	80021c6 <HAL_SPI_Transmit+0x2d4>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f1c:	f7fe fbd4 	bl	80006c8 <HAL_GetTick>
 8001f20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d002      	beq.n	8001f38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f32:	2302      	movs	r3, #2
 8001f34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f36:	e13d      	b.n	80021b4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HAL_SPI_Transmit+0x52>
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f48:	e134      	b.n	80021b4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2200      	movs	r2, #0
 8001f56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	88fa      	ldrh	r2, [r7, #6]
 8001f62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	88fa      	ldrh	r2, [r7, #6]
 8001f68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f94:	d10f      	bne.n	8001fb6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc0:	2b40      	cmp	r3, #64	; 0x40
 8001fc2:	d007      	beq.n	8001fd4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fdc:	d94b      	bls.n	8002076 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_SPI_Transmit+0xfa>
 8001fe6:	8afb      	ldrh	r3, [r7, #22]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d13e      	bne.n	800206a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	1c9a      	adds	r2, r3, #2
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002010:	e02b      	b.n	800206a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b02      	cmp	r3, #2
 800201e:	d112      	bne.n	8002046 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002024:	881a      	ldrh	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	1c9a      	adds	r2, r3, #2
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002044:	e011      	b.n	800206a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002046:	f7fe fb3f 	bl	80006c8 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d803      	bhi.n	800205e <HAL_SPI_Transmit+0x16c>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d102      	bne.n	8002064 <HAL_SPI_Transmit+0x172>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002068:	e0a4      	b.n	80021b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1ce      	bne.n	8002012 <HAL_SPI_Transmit+0x120>
 8002074:	e07c      	b.n	8002170 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_SPI_Transmit+0x192>
 800207e:	8afb      	ldrh	r3, [r7, #22]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d170      	bne.n	8002166 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d912      	bls.n	80020b4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	881a      	ldrh	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	1c9a      	adds	r2, r3, #2
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b02      	subs	r3, #2
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020b2:	e058      	b.n	8002166 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	330c      	adds	r3, #12
 80020be:	7812      	ldrb	r2, [r2, #0]
 80020c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80020da:	e044      	b.n	8002166 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d12b      	bne.n	8002142 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d912      	bls.n	800211a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f8:	881a      	ldrh	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	1c9a      	adds	r2, r3, #2
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b02      	subs	r3, #2
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002118:	e025      	b.n	8002166 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	330c      	adds	r3, #12
 8002124:	7812      	ldrb	r2, [r2, #0]
 8002126:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002140:	e011      	b.n	8002166 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002142:	f7fe fac1 	bl	80006c8 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d803      	bhi.n	800215a <HAL_SPI_Transmit+0x268>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d102      	bne.n	8002160 <HAL_SPI_Transmit+0x26e>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002164:	e026      	b.n	80021b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800216a:	b29b      	uxth	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1b5      	bne.n	80020dc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	6839      	ldr	r1, [r7, #0]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f941 	bl	80023fc <SPI_EndRxTxTransaction>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	77fb      	strb	r3, [r7, #31]
 80021b0:	e000      	b.n	80021b4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80021b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80021c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80021e0:	f7fe fa72 	bl	80006c8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80021f0:	f7fe fa6a 	bl	80006c8 <HAL_GetTick>
 80021f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80021f6:	4b39      	ldr	r3, [pc, #228]	; (80022dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	015b      	lsls	r3, r3, #5
 80021fc:	0d1b      	lsrs	r3, r3, #20
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	fb02 f303 	mul.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002206:	e054      	b.n	80022b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220e:	d050      	beq.n	80022b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002210:	f7fe fa5a 	bl	80006c8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	429a      	cmp	r2, r3
 800221e:	d902      	bls.n	8002226 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d13d      	bne.n	80022a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002234:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800223e:	d111      	bne.n	8002264 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002248:	d004      	beq.n	8002254 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002252:	d107      	bne.n	8002264 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226c:	d10f      	bne.n	800228e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800228c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e017      	b.n	80022d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4013      	ands	r3, r2
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	429a      	cmp	r2, r3
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d19b      	bne.n	8002208 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000000 	.word	0x20000000

080022e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80022ee:	f7fe f9eb 	bl	80006c8 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022fe:	f7fe f9e3 	bl	80006c8 <HAL_GetTick>
 8002302:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002304:	4b3c      	ldr	r3, [pc, #240]	; (80023f8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	00da      	lsls	r2, r3, #3
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	0d1b      	lsrs	r3, r3, #20
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800231c:	e05f      	b.n	80023de <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002324:	d106      	bne.n	8002334 <SPI_WaitFifoStateUntilTimeout+0x54>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	330c      	adds	r3, #12
 8002332:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233a:	d050      	beq.n	80023de <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800233c:	f7fe f9c4 	bl	80006c8 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	429a      	cmp	r2, r3
 800234a:	d902      	bls.n	8002352 <SPI_WaitFifoStateUntilTimeout+0x72>
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d13d      	bne.n	80023ce <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002360:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800236a:	d111      	bne.n	8002390 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002374:	d004      	beq.n	8002380 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800237e:	d107      	bne.n	8002390 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800238e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002398:	d10f      	bne.n	80023ba <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e010      	b.n	80023f0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3b01      	subs	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	4013      	ands	r3, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d197      	bne.n	800231e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000000 	.word	0x20000000

080023fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af02      	add	r7, sp, #8
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2200      	movs	r2, #0
 8002410:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f7ff ff63 	bl	80022e0 <SPI_WaitFifoStateUntilTimeout>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d007      	beq.n	8002430 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002424:	f043 0220 	orr.w	r2, r3, #32
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e027      	b.n	8002480 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2200      	movs	r2, #0
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f7ff fec8 	bl	80021d0 <SPI_WaitFlagStateUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244a:	f043 0220 	orr.w	r2, r3, #32
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e014      	b.n	8002480 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2200      	movs	r2, #0
 800245e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f7ff ff3c 	bl	80022e0 <SPI_WaitFifoStateUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002472:	f043 0220 	orr.w	r2, r3, #32
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e000      	b.n	8002480 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <__libc_init_array>:
 8002488:	b570      	push	{r4, r5, r6, lr}
 800248a:	4d0d      	ldr	r5, [pc, #52]	; (80024c0 <__libc_init_array+0x38>)
 800248c:	4c0d      	ldr	r4, [pc, #52]	; (80024c4 <__libc_init_array+0x3c>)
 800248e:	1b64      	subs	r4, r4, r5
 8002490:	10a4      	asrs	r4, r4, #2
 8002492:	2600      	movs	r6, #0
 8002494:	42a6      	cmp	r6, r4
 8002496:	d109      	bne.n	80024ac <__libc_init_array+0x24>
 8002498:	4d0b      	ldr	r5, [pc, #44]	; (80024c8 <__libc_init_array+0x40>)
 800249a:	4c0c      	ldr	r4, [pc, #48]	; (80024cc <__libc_init_array+0x44>)
 800249c:	f000 f820 	bl	80024e0 <_init>
 80024a0:	1b64      	subs	r4, r4, r5
 80024a2:	10a4      	asrs	r4, r4, #2
 80024a4:	2600      	movs	r6, #0
 80024a6:	42a6      	cmp	r6, r4
 80024a8:	d105      	bne.n	80024b6 <__libc_init_array+0x2e>
 80024aa:	bd70      	pop	{r4, r5, r6, pc}
 80024ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80024b0:	4798      	blx	r3
 80024b2:	3601      	adds	r6, #1
 80024b4:	e7ee      	b.n	8002494 <__libc_init_array+0xc>
 80024b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ba:	4798      	blx	r3
 80024bc:	3601      	adds	r6, #1
 80024be:	e7f2      	b.n	80024a6 <__libc_init_array+0x1e>
 80024c0:	08002720 	.word	0x08002720
 80024c4:	08002720 	.word	0x08002720
 80024c8:	08002720 	.word	0x08002720
 80024cc:	08002724 	.word	0x08002724

080024d0 <memset>:
 80024d0:	4402      	add	r2, r0
 80024d2:	4603      	mov	r3, r0
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d100      	bne.n	80024da <memset+0xa>
 80024d8:	4770      	bx	lr
 80024da:	f803 1b01 	strb.w	r1, [r3], #1
 80024de:	e7f9      	b.n	80024d4 <memset+0x4>

080024e0 <_init>:
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	bf00      	nop
 80024e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e6:	bc08      	pop	{r3}
 80024e8:	469e      	mov	lr, r3
 80024ea:	4770      	bx	lr

080024ec <_fini>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	bf00      	nop
 80024f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024f2:	bc08      	pop	{r3}
 80024f4:	469e      	mov	lr, r3
 80024f6:	4770      	bx	lr
